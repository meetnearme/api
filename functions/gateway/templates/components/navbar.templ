package components

import (
	"context"
	"fmt"
	"github.com/meetnearme/api/functions/gateway/constants"
	"github.com/meetnearme/api/functions/gateway/helpers"
	"github.com/meetnearme/api/functions/gateway/types"
	"os"
	"strconv"
	"strings"
	"unicode"
)

templ MiniProfileInNav(userInfo constants.UserInfo, ctx context.Context) {
	{{ roleClaims, ok := ctx.Value("roleClaims").([]constants.RoleClaim) }}
	<strong>{ string(userInfo.Name) }</strong>
	<br/>
	{ string(userInfo.Email) }
	<ul
		tabindex="0"
		class="menu menu-sm"
	>
		<li>
			<a href="/admin/home" class="justify-between">
				Admin
				// <span class="badge">New</span>
			</a>
		</li>
		if ok && helpers.HasRequiredRole(roleClaims, []string{constants.Roles[constants.EventAdmin], constants.Roles[constants.SuperAdmin]}) {
			<li>
				<a href="/admin/event/new">
					Create Event
				</a>
			</li>
		}
		if ok && helpers.HasRequiredRole(roleClaims, []string{constants.Roles[constants.CompetitionAdmin], constants.Roles[constants.SuperAdmin]}) {
			<li>
				<a href="/admin/competition/new">
					Create Competition
				</a>
			</li>
		}
		<li class="border-t-2 mt-2 pt-2 border-base-300">
			<a x-data="" :href={ " '/auth/logout?" + constants.POST_LOGOUT_REDIRECT_URI_KEY + "=' + window.location.href " }>
				Logout
			</a>
		</li>
	</ul>
}

templ NavListItems(userInfo constants.UserInfo) {
	if userInfo.Email == "" {
		<li>
			<a
				x-data=""
				:href="'/auth/login?redirect=' + window.location.href"
				class="btn btn-outline btn-primary mr-2 mb-2"
			>Sign In</a>
		</li>
		<li>
			<a
				x-data=""
				:href="'/auth/login?redirect=' + window.location.href"
				class="btn btn-primary update-text-if-cookie"
			>Sign Up</a>
		</li>
	}
	<li><a href="/about" class="px-5 py-3">About</a></li>
	// Change back to "Add an Event" when we release Seshu
	// if userInfo.Email != "" {
	// 	<li><a href="/admin/add-event-source" class="btn btn-primary">Add an Event</a></li>
	// } else {
	// 	<li><a href="/auth/login" class="btn btn-primary">Sign Up</a></li>
	// }
}

templ PurchasableItemsList(hasRegistrationFields bool) {
	<template x-for="(purch, index) in purchasables" :key="index">
		<template x-if="purch.inventory > 0 && (new Date(purch.expires_on) > new Date() || !purch.expires_on)">
			<label class="form-control w-full bg-base-200 card mb-5 p-2 px-4">
				<span class="label-text text-lg mt-5" x-text="purch.name"></span>
				<template x-if="purch.expires_on">
					<div class="alert alert-info p-2 mt-2 w-fit">
						<span>Available until</span>
						<strong>
							<span
								class="text-md"
								x-text="new Date(purch.expires_on).toLocaleString('en-US', {
							year: 'numeric',
							month: 'short',
							day: 'numeric',
							hour: 'numeric',
							minute: '2-digit',
							hour12: true,
							timeZone: eventTimezone
						}).replace(',', ' @')"
							></span>
						</strong>
					</div>
				</template>
				<span class="label-text text-lg mt-5" x-text="`\$${(purch.cost / 100)}`"></span>
				<div>
					<div class="relative flex items-center max-w-[8rem] mb-5 mt-3 counter-click-container">
						<button @click="handleCounterClick($event.target, 'down', purch.name, index)" type="button" id="decrement-button" data-input-counter-decrement="quantity-input" class="bg-gray-700 hover:bg-gray-600 border-gray-600 border rounded-s-lg p-3 h-11 focus:ring-gray-700 focus:ring-2 focus:outline-none">
							<svg class="w-3 h-3 text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 2">
								<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h16"></path>
							</svg>
						</button>
						<input x-model="formData[`${purch.name}_count_${index}`]" type="number" id="quantity-input" data-input-counter aria-describedby="helper-text-explanation" class="input-number-counter bg-gray-50 border-x-0 border-gray-300 h-11 text-center text-gray-900 text-sm input-bordered input-primary bg-gray-700 border-gray-600 placeholder-gray-400 text-white" placeholder="" required/>
						<button @click="handleCounterClick($event.target, 'up', purch.name, index)" type="button" id="increment-button" data-input-counter-increment="quantity-input" class="bg-gray-700 hover:bg-gray-600 border-gray-600 border rounded-e-lg p-3 h-11 focus:ring-gray-700 focus:ring-2 focus:outline-none">
							<svg class="w-3 h-3 text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18">
								<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 1v16M1 9h16"></path>
							</svg>
						</button>
					</div>
					// show per-purchasables item registration fields if needed
					if hasRegistrationFields {
						<template
							x-if="purch.registration_fields_copy?.length"
						>
							<template
								x-for="(field, idx) in purch.registration_fields_copy"
								:key="field.name"
							>
								<div class="flex-none">
									<label class="form-control w-full">
										<template x-if="parseInt(formData[`${purch.name}_count_${index}`]) > 0 && field.type !== 'checkbox' ">
											<div class="label">
												<span class="label-text" x-text="field.description"></span>
											</div>
										</template>
										<template x-for="i in parseInt(formData[`${purch.name}_count_${index}`] || 0)" :key="i">
											<div class="my-2" x-data="{ _index: `purch_${eventId}_${purch.name}_field_${field.name}_count_${i}` }">
												@RegistrationFieldsByType(true)
											</div>
										</template>
									</label>
								</div>
							</template>
						</template>
					}
				</div>
			</label>
		</template>
	</template>
}

templ RegistrationFieldsByType(nestedInPurchasable bool) {
	<template x-if="field.type == 'text'">
		// TODO: x-model.fill causes a problem with default values
		// but only in the case of the `nestedInPurchasable` fields
		<input
			type="text"
			if nestedInPurchasable {
				x-model="formData[_index]"
				x-on:change="validateOneField(field, _index, idx)"
				:name="_index"
				:data-index="_index"
			} else {
				x-model="formData[field.name]"
				x-on:change="validateOneField(field, field?.name, idx)"
				:name="field.name"
				x-model.fill="field.default"
			}
			:placeholder="field.placeholder"
			:required="field.required"
			class="input input-bordered w-full border-opacity-100"
		/>
	</template>
	<template x-if="field.type == 'checkbox'">
		// NOTE: checkboxes look wrong in the UI without
		// a label, we show individual labels only for them
		<div>
			<div class="label">
				<span class="label-text" x-text="field.description"></span>
			</div>
			<input
				type="checkbox"
				class="z-[9] checkbox checkbox-xs checkbox-tertiary border-opacity-100 mr-5 my-1"
				x-init="$el.indeterminate = true"
				if nestedInPurchasable {
					x-model="formData[_index]"
					x-on:change="validateOneField(field, _index, idx)"
					:name="_index"
					:data-index="_index"
				} else {
					x-model="formData[field.name]"
					x-on:change="validateOneField(field, field?.name, idx)"
					:name="field.name"
					x-model.fill="field.default"
				}
				:placeholder="field.placeholder"
				:required="field.required"
				class="input input-bordered w-full"
			/>
		</div>
	</template>
	<template x-if="field.type == 'select'">
		<select
			if nestedInPurchasable {
				x-model="formData[_index]"
				x-on:change="validateOneField(field, _index, idx)"
				:name="_index"
				:data-index="_index"
			} else {
				x-model="formData[field.name]"
				x-on:change="validateOneField(field, field?.name, idx)"
				:name="field.name"
				x-model.fill="field.default"
			}
			:type="field.type"
			:placeholder="field.placeholder"
			:required="field.required"
			class="select w-full select-bordered border-opacity-100"
		>
			<template x-if="!field.placeholder && field.required">
				<option disabled selected x-text=" 'Select One' "></option>
			</template>
			<template x-if="field.placeholder">
				<option disabled selected x-text="field.placeholder"></option>
			</template>
			<template x-for="(option, idx) in field.options" :key="idx">
				<option x-text="option"></option>
			</template>
		</select>
	</template>
}

func getFirstChar(userInfo constants.UserInfo) string {
	name := strings.TrimSpace(userInfo.Name)
	if name == "" {
		return "?"
	}

	// Get the first rune (Unicode character) in the string
	var firstRune rune
	for _, r := range name {
		firstRune = r
		break
	}

	// Convert to uppercase for consistency
	firstChar := string(unicode.ToUpper(firstRune))
	return firstChar
}

templ Navbar(userInfo constants.UserInfo, subnavTabs []string, event types.Event, ctx context.Context) {
	<div class="drawer drawer-end">
		<input id="main-drawer" type="checkbox" class="drawer-toggle"/>
		<div class="drawer-content flex flex-col">
			<!-- Navbar -->
			<div id="main-nav" class="navbar fixed z-50 top-0 w-full bg-base-100 shadow-md mb-5">
				<div class="container mx-auto flex items-center">
					<div class="flex flex-1">
						<a href="/" class="btn pl-2 text-xl bg-black rounded-lg">
							<img class="brand-logo" alt="Meet Near Me Logo: 4 faces laughing, looking inward at a location pin" src={ templ.EscapeString(os.Getenv("STATIC_BASE_URL") + "/assets/logo.svg") }/>
							<img class="brand-type" alt="Meet Near Me" src={ templ.EscapeString(os.Getenv("STATIC_BASE_URL") + "/assets/logotype.svg") }/>
						</a>
					</div>
					<div class="navbar-end flex">
						<div class="items-center lg:flex">
							<ul class="menu menu-horizontal px-1 hidden lg:inline-flex">
								@NavListItems(userInfo)
							</ul>
							if userInfo.Email != "" {
								<div class="dropdown dropdown-end px-3 hidden lg:inline-block">
									<div tabindex="0" role="button" class="btn btn-ghost btn-circle avatar placeholder">
										<div class="border w-24 rounded-full">
											<span class="text-3xl">{ getFirstChar(userInfo) }</span>
										</div>
									</div>
									<div class="dropdown-content bg-base-100 rounded-box z-[1] mt-3 w-52 p-4 shadow-lg border border-base-300">
										@MiniProfileInNav(userInfo, ctx)
									</div>
								</div>
							}
							<div class="flex-none" onclick="document.getElementById('flyout-tab-main').click();">
								<label for="main-drawer" aria-label="open sidebar" class="btn btn-square btn-ghost">
									<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="inline-block w-6 h-6 stroke-current fill-current"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path></svg>
								</label>
							</div>
						</div>
					</div>
				</div>
			</div>
			{ children... }
		</div>
		<div class="drawer-side">
			<label for="main-drawer" aria-label="close sidebar" class="drawer-overlay"></label>
			<div class="border border-base-200 p-4 w-10/12 md:w-1/2 lg:w-1/3 min-h-full bg-base-100">
				<div class="block justify-end pb-5">
					<button class="btn btn-circle btn-ghost text-3xl float-end" onclick="document.getElementById('main-drawer').click();"><svg class="svg-icon" style="width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"><path d="M777.856 280.192l-33.92-33.952-231.872 231.872-231.84-231.872-33.984 33.888 231.872 231.904-231.84 231.84 33.888 33.984 231.904-231.904 231.84 231.872 33.952-33.888-231.872-231.904z"></path></svg></button>
				</div>
				if userInfo.Email != "" {
					<div class="p-2 m-1 card bg-base-200 lg:hidden">
						<div tabindex="0" role="button" class="btn btn-ghost btn-circle avatar placeholder">
							<div class="border w-24 rounded-full">
								<span class="text-3xl">{ string(getFirstChar(userInfo)) }</span>
							</div>
							// <div class="w-10 rounded-full">
							// 	<img
							// 		alt="Tailwind CSS Navbar component"
							// 		src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.jpg" />
							// </div>
						</div>
						<ul
							tabindex="0"
							class="menu menu-sm"
						>
							@MiniProfileInNav(userInfo, ctx)
						</ul>
					</div>
				}
				<div role="tablist" class="tabs tabs-bordered w-full">
					<input id="flyout-tab-main" type="radio" name="flyout-nav-tabs" role="tab" class="tab" aria-label="Main Nav"/>
					<div role="tabpanel" class="tab-content p-2">
						<ul class="menu">
							<!-- Sidebar content here -->
							@NavListItems(userInfo)
						</ul>
					</div>
					if helpers.ArrFindFirst(subnavTabs, []string{constants.SubnavItems[constants.NvFilters]}) != "" {
						<input
							id="flyout-tab-filters"
							type="radio"
							name="flyout-nav-tabs"
							role="tab"
							class="tab"
							aria-label="Filters"
							checked="checked"
						/>
						<div
							x-data="getFilterFormState()"
							role="tabpanel"
							class="tab-content pt-4 relative"
							@location-dropdown.window="locationDropdown = $event.detail.option;"
						>
							<h3 class="text-xl my-3">Search</h3>
							<form id="query-search-form" novalidate>
								<div class="join rounded-full w-full">
									<div class="w-full">
										<input
											id="search-input"
											class="input join-item input-bordered w-full"
											type="text"
											placeholder="I want to exercise with a group"
											:value="$store.urlState.q || ''"
											required
										/>
									</div>
									<button
										type="submit"
										id="search-submit-btn"
										@click.prevent="$store.urlState.setParam('q', $event.target.closest('form').querySelector('input[type=text]').value); document.getElementById('main-drawer').click();"
										class="btn btn-primary join-item"
									>Search</button>
								</div>
							</form>
							<form
								id="category-search-form"
								novalidate
								@submit.prevent=""
							>
								<br/>
								<br/>
								// @click function call is a global shared from home_details.templ
								<button
									type="submit"
									class="btn btn-primary w-full sticky top-0 z-[10]"
									@click.prevent="handleFilterSubmit"
								>
									Apply Filters
								</button>
								// Source: https://www.penguinui.com/components/combobox
								<div x-data="getLocationSearchState()" class="flex w-full max-w-xs flex-col gap-1" x-on:keydown="handleKeydownOnOptions($event)" x-on:keydown.esc.window="isOpen = false, openedWithKeyboard = false" x-init="options = allOptions">
									<h3 class="text-xl my-3">
										Location <span x-text="selectedOption?.label?.match?.(/^[0-9]|\-/)?.length > 0 ? '(Geocoordinates)' : '' "></span>
									</h3>
									<span x-show="locationAccessDeclined" class="badge badge-error text-sm mb-2">
										Location access was declined.
									</span>
									<span x-show="cityNotFound" class="badge badge-error text-sm mb-2">
										Error: City not found.
									</span>
									<div class="relative">
										<!-- trigger button  -->
										<button
											type="button"
											class="inline-flex w-full items-center justify-between gap-2 border rounded-md mt-2 p-3 text-sm font-medium tracking-wide  transition input-bordered focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-green-700 dark:focus-visible:outline-green-600"
											role="combobox"
											aria-controls="makesList"
											aria-haspopup="listbox"
											x-on:click="isOpen = ! isOpen"
											x-on:keydown.down.prevent="openedWithKeyboard = true"
											x-on:keydown.enter.prevent="openedWithKeyboard = true"
											x-on:keydown.space.prevent="openedWithKeyboard = true"
											x-bind:aria-expanded="isOpen || openedWithKeyboard"
											x-bind:aria-label="selectedOption.label ? '' : ''"
										>
											<span
												class="text-sm font-normal"
												x-text="selectedOption?.label ? selectedOption.label : 'Location: Please Select'"
											></span>
											<span
												class="sr-only"
												x-text="selectedOption?.label ? selectedOption.label : 'Location: Please Select'"
											></span>
											<!-- Chevron  -->
											<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5" aria-hidden="true">
												<path fill-rule="evenodd" d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd"></path>
											</svg>
										</button>
										<!-- Hidden Input To Grab The Selected Value  -->
										<input id="make" name="make" x-ref="hiddenTextField" hidden=""/>
										<div
											x-show="isOpen || openedWithKeyboard"
											:class="{'opacity-100': isOpen || openedWithKeyboard}"
											class="w-full opacity-0 transition-all absolute left-0 top-12 z-10 overflow-hidden rounded-md border bg-base-200"
											id="makesList"
											role="listbox"
											aria-label="locations list"
											x-on:click.outside="isOpen = false, openedWithKeyboard = false"
											x-on:keydown.down.prevent="$focus.wrap().next()"
											x-on:keydown.up.prevent="$focus.wrap().previous()"
											x-transition
											x-trap="openedWithKeyboard"
										>
											<!-- Search  -->
											<div class="relative">
												<svg
													xmlns="http://www.w3.org/2000/svg"
													viewBox="0 0 24 24"
													stroke="currentColor"
													fill="none"
													stroke-width="1.5"
													class="absolute left-4 top-1/2 size-5 -translate-y-1/2"
													aria-hidden="true"
												>
													<path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"></path>
												</svg>
												<input
													type="text"
													class="w-full border-b py-2.5 pl-11 pr-4 text-sm focus:outline-none disabled:cursor-not-allowed disabled:opacity-75"
													name="loc_search"
													aria-label="Search Locations"
													@input.throttle="fetchLocations($event.target.value)"
													x-ref="loc_search"
													placeholder="Search"
												/>
											</div>
											<progress :class="{ 'opacity-0': !isLoading }" class="progress absolute input-bottom h-2 w-full -m-[5px]"></progress>
											<!-- Options  -->
											<ul class="flex max-h-44 flex-col overflow-y-auto">
												<li class="hidden px-4 py-2 text-sm" x-ref="noResultsMessage">
													<span>No matches found</span>
												</li>
												<li
													class="px-4 py-2 text-sm cursor-pointer bg-primary text-primary-content focus-visible:bg-secondary focus-visible:outline-none focus-visible:text-secondary-content hover:bg-secondary hover:text-secondary-content"
													tabindex="0"
													role="option"
													@click="findAndSetLocation"
													@keydown.enter="findAndSetLocation"
													:id="'option-locateme'"
												>
													<span class="flex gap-2">
														@Icon("location-outline")
														Locate Me
													</span>
												</li>
												<template x-for="(item, index) in options" :key="index">
													<li
														class="combobox-option inline-flex cursor-pointer justify-between gap-6 bg-base-200 px-4 py-2 text-sm hover:text-secondary focus-visible:bg-slate-800/5 focus-visible:text-primary focus-visible:outline-none"
														role="option"
														@click="setSelectedOption(item)"
														@keydown.enter="setSelectedOption(item)"
														:id="'option-' + index"
														tabindex="0"
													>
														<!-- Label  -->
														<span :class="selectedOption && selectedOption.value == item.value ? 'font-bold' : null" x-text="item.label"></span>
														<!-- Screen reader 'selected' indicator  -->
														<span class="sr-only" x-text="selectedOption && selectedOption.value == item.value ? 'selected' : null"></span>
														<!-- Checkmark  -->
														<svg x-cloak x-show="selectedOption && selectedOption.value == item.value" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke="currentColor" fill="none" stroke-width="2" class="size-4" aria-hidden="true">
															<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"></path>
														</svg>
													</li>
												</template>
											</ul>
										</div>
									</div>
								</div>
								<h3 class="text-xl my-3">Distance</h3>
								<div class="flex items-center">
									<label class="form-control w-full max-w-xs">
										<select
											x-model="radius"
											class="select select-bordered w-full max-w-xs"
										>
											<option :selected="radius === '10'" value="10">10 mi</option>
											<option :selected="radius === '25'" value="25">25 mi</option>
											<option :selected="radius === '50'" value="50">50 mi</option>
											<option :selected="radius === '100'" value="100">100 mi</option>
											<option :selected="radius === '250'" value="250">250 mi</option>
											<option :selected="radius === '500'" value="500">500 mi</option>
											<option :selected="radius === '1000'" value="1000">1,000 mi</option>
											<option :selected="radius === '2500'" value="2500">2,500 mi</option>
											<option :selected="radius === '25000'" value="25000">Everywhere</option>
										</select>
									</label>
								</div>
								<h3 class="text-xl my-3">Categories</h3>
								@NestedCheckboxList(false, []string{})
							</form>
						</div>
					}
					if (event.HasPurchasable || event.HasRegistrationFields) && helpers.ArrFindFirst(subnavTabs, []string{constants.SubnavItems[constants.NvCart]}) != "" {
						<input id="flyout-tab-cart" type="radio" name="flyout-nav-tabs" role="tab" class="tab" aria-label="Cart"/>
						<div x-data="getCartRegistrationState()" role="tabpanel" class="tab-content p-2">
							<template x-if="registrationFields?.length">
								<div>
									<h3 class="text-xl my-3">Registration</h3>
									<div class="divider"></div>
								</div>
							</template>
							<template x-for="(field, index) in registrationFields" :key="index">
								<label class="form-control w-full" x-data="{ idx: '' }">
									<template x-if="field?.type !== 'checkbox' ">
										<div class="label">
											<span class="label-text" x-text="field.description"></span>
										</div>
									</template>
									@RegistrationFieldsByType(false)
								</label>
							</template>
							<br/>
							<br/>
							<template x-if="purchasables?.length">
								<div>
									<h3 class="text-xl my-3">Cart</h3>
									<div class="divider my-3"></div>
								</div>
							</template>
							if event.HasPurchasable && event.HasRegistrationFields {
								<template x-if="!registrationFieldsLoaded || !purchasablesLoaded">
									<div>
										<div>Loading cart items...</div>
										<div class="mt-2"><span class="loading loading-spinner loading-md text-primary"></span></div>
									</div>
								</template>
								<template x-if="registrationFieldsLoaded && purchasablesLoaded">
									@PurchasableItemsList(event.HasRegistrationFields)
								</template>
							} else if event.HasPurchasable {
								<template x-if="!purchasablesLoaded">
									<div>
										<div>Loading cart items...</div>
										<div class="mt-2"><span class="loading loading-spinner loading-md text-primary"></span></div>
									</div>
								</template>
								<template x-if="purchasablesLoaded">
									@PurchasableItemsList(event.HasRegistrationFields)
								</template>
							} else if event.HasRegistrationFields {
								<template x-if="!registrationFieldsLoaded">
									<div>
										<div>Loading cart items...</div>
										<div class="mt-2"><span class="loading loading-spinner loading-md text-primary"></span></div>
									</div>
								</template>
								<template x-if="registrationFieldsLoaded">
									@PurchasableItemsList(event.HasRegistrationFields)
								</template>
							}
							// </div>
							<template x-if="errors">
								<template x-for="(err, _id) in errors" :key="_id">
									<div class="alert alert-error mt-2">
										<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 shrink-0 stroke-current" fill="none" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
										</svg>
										<span x-html="err"></span>
									</div>
								</template>
							</template>
							<br/>
							<br/>
							if event.HasPurchasable {
								<button data-umami-event={ "checkout-reg-clk" } data-umami-event-event-id={ event.Id } data-umami-event-user-id={ userInfo.Sub } class="btn btn-primary w-full" @click="validateRegistrationThenSubmit()">Checkout<template x-if="reqInFlight"><span class="loading loading-spinner loading-sm"></span></template></button>
							} else if event.HasRegistrationFields {
								<button data-umami-event={ "checkout-reg-clk" } data-umami-event-event-id={ event.Id } data-umami-event-user-id={ userInfo.Sub } class="btn btn-primary w-full" @click="validateRegistrationThenSubmit()">Register<template x-if="reqInFlight"><span class="loading loading-spinner loading-sm"></span></template></button>
							}
						</div>
					}
				</div>
			</div>
		</div>
	</div>
	if helpers.ArrFindFirst(subnavTabs, []string{constants.SubnavItems[constants.NvCart]}) != "" {
		<script id="registration-purchasables" data-has-registration={ fmt.Sprint(event.HasRegistrationFields) } data-has-purchasables={ fmt.Sprint(event.HasPurchasable) } data-event-id={ event.Id } data-event-source-id={ event.EventSourceId } data-event-source-type={ event.EventSourceType } data-event-name={ event.Name } data-event-timezone={ event.Timezone.String() } data-user-id={ userInfo.Sub } data-default-radius={ strconv.FormatFloat(constants.DEFAULT_SEARCH_RADIUS, 'f', -1, 64) }>
			function getCartRegistrationState() {
				return {
					registrationFields: null,
					registrationFieldsLoaded: false,
					purchasables: null,
					purchasablesLoaded: false,
					purchaseComplete: false,
					reqInFlight: false,
					formData: {},
					errors: {},
					eventId: document.querySelector('#registration-purchasables').getAttribute('data-event-id'),
					eventName: document.querySelector('#registration-purchasables').getAttribute('data-event-name'),
					eventTimezone: document.querySelector('#registration-purchasables').getAttribute('data-event-timezone'),
					hasRegistration: document.querySelector('#registration-purchasables').getAttribute('data-has-registration') === "true",
					hasPurchasable: document.querySelector('#registration-purchasables').getAttribute('data-has-purchasables') === "true",
					eventSourceId: document.querySelector('#registration-purchasables').getAttribute('data-event-source-id'),
					eventSourceType: document.querySelector('#registration-purchasables').getAttribute('data-event-source-type'),
					userId: document.querySelector('#registration-purchasables').getAttribute('data-user-id'),
					async init() {
						const promises = [];
						if (this.hasRegistration) {
							promises.push(this.fetchRegistrationFields());
						}
						if (this.hasPurchasable) {
							promises.push(this.fetchPurchasables());
						}
						await Promise.all(promises);
						this.checkAndMoveRegistrationFields();
					},
					checkAndMoveRegistrationFields() {
						if (this.hasRegistration && this.hasPurchasable &&
									this.registrationFieldsLoaded && this.purchasablesLoaded) {
							this.moveRegistrationFieldsToPurchasable();
						}
					},
					async fetchRegistrationFields() {
						try {
							const response = await fetch(`/api/registration-fields/${ this.eventSourceId && this.eventSourceType === 'EVS' ? this.eventSourceId : this.eventId}`);
							const json = await response.json();
							this.registrationFields = json?.fields;
							this.registrationFieldsLoaded = true;
						} catch (error) {
							// eslint-disable-next-line no-console
							console.error("Error fetching registration fields:", error);
							this.registrationFieldsLoaded = false;
						}
					},
					async submitPurchase() {
						this.reqInFlight = true;
						try {
							const purchasedItems = this.purchasables
								.map(purchasable => {
									const countKey = Object.keys(this.formData).find(key =>
										key.startsWith(`${purchasable.name}_count_`)
									);
									const quantity = parseInt(this.formData[countKey] || '0');

									if (quantity > 0) {
										// Construct reg_responses for this purchasable
										const reg_responses = [];
										for (let i = 1; i <= quantity; i++) {
											const responseObj = {};
											purchasable.registration_fields_copy?.forEach(field => {
												const fieldKey = `purch_${this.eventId}_${purchasable.name}_field_${field.name}_count_${i}`;
												if (Object.prototype.hasOwnProperty.call(this.formData, fieldKey)) {
													responseObj[field.name] = this.formData[fieldKey];
												}
											});
											if (Object.keys(responseObj).length > 0) {
												reg_responses.push(responseObj);
											}
										}

										return {
											name: purchasable.name,
											item_type: purchasable.item_type,
											cost: purchasable.cost,
											quantity: quantity,
											currency: purchasable.currency,
											donation_ratio: purchasable.donation_ratio,
											reg_responses: reg_responses
										};
									}
									return null;
								})
								.filter(item => item !== null);

							const total = purchasedItems.reduce((sum, item) => sum + (item.cost * item.quantity), 0);
							if (purchasedItems?.length < 1) {
								this.errors['checkout'] = "You have no selected items.";
								this.reqInFlight = false;
								return
							}
							const response = await fetch(`/api/checkout/${this.eventId}${this.eventSourceId ? `?event_source_id=${this.eventSourceId}&event_source_type=${this.eventSourceType}` : ''}`, {
								method: 'POST',
								headers: {
									'Content-Type': 'application/json'
								},
								body: JSON.stringify({
									event_name: this.eventName,
									purchased_items: purchasedItems,
									total: total,
									currency: "USD"
								})
							});
							if (response.status === 401) {
								this.errors['checkout'] = `You must be logged in to purchase tickets. <br /><a class="btn mt-4 btn-sm" href="/auth/login?redirect=${window.location.href}">Register or Login now</a>`;
								this.reqInFlight = false;
								return
							}
							const json = await response.json();
							this.reqInFlight = false;
							this.purchaseComplete = true;
							if (json?.stripe_checkout_url) {
								// Validate the URL to ensure it's a trusted Stripe URL
								const trustedDomain = 'https://checkout.stripe.com/';
								if (json.stripe_checkout_url.startsWith(trustedDomain)) {
									window.location.href = json.stripe_checkout_url;
								} else {
									this.errors['checkout'] = "Invalid checkout URL received.";
								}
							} else if (total <= 0) {
								// `?new_purch_key` is received by the profile page to both highlight, scroll to, and poll in
								// wait for the new event because of dynamo's eventual consistency.
								window.location.href = window.location.origin + `/admin/profile#registration-history${this.userId ? `?new_purch_key=${json?.composite_key}` : ''}`;
							} else {
								if (json?.error?.message) {
									this.errors['checkout'] = json.error.message;
								} else {
									this.errors['checkout'] = "Unable to proceed. Please try again.";
								}
							}
						} catch (error) {
							// eslint-disable-next-line no-console
							console.error("Error submitting:", error);
							this.reqInFlight = false;
							this.purchaseComplete = false;
							this.errors['checkout'] = "Unable to proceed. Please try again.";
						}
					},
					async fetchPurchasables() {
						try {
							const response = await fetch(`/api/purchasables/${ this.eventSourceId && this.eventSourceType === 'EVS' ? this.eventSourceId : this.eventId}`);
							const json = await response.json();
							this.purchasables = json?.purchasable_items;
							this.purchasablesLoaded = true;
						} catch (error) {
							// eslint-disable-next-line no-console
							console.error("Error fetching registration fields:", error);
							this.purchasablesLoaded = false;
						}
					},
					moveRegistrationFieldsToPurchasable() {
						if (this.hasPurchasable && this.hasRegistration) {
							let fieldsToRemove = new Set();

							this.purchasables?.forEach?.(item => {
								if (item.registration_fields && Array.isArray(item.registration_fields)) {
									// Create a copy of the filtered fields
									item.registration_fields_copy = this.registrationFields
										.filter(field => item.registration_fields.includes(field.name))
										.map(field => Object.assign({}, field));

									// Add the copied fields to the set of fields to remove
									item.registration_fields_copy.forEach(field => fieldsToRemove.add(field.name));
								}
							});

							// Remove the copied fields from the main registration fields
							this.registrationFields = this.registrationFields?.filter?.(field => !fieldsToRemove.has(field.name));
						}
					},
					validateOneField(field, fieldName, includeIdx) {
						if (field?.required) {
							if (field?.type === 'checkbox') {
								if (this?.formData?.[fieldName] === undefined) {
									this.errors[fieldName] = `Response to '${field?.description}' ${includeIdx > -1 ? '#' + (includeIdx + 1) : ''} is required`
								} else {
									delete this.errors[fieldName]
								}
							} else if ( !this?.formData?.[fieldName] ) {
								this.errors[fieldName] = `Response to '${field?.description}' ${includeIdx > -1 ? '#' + (includeIdx + 1) : ''} is required`
							} else {
								delete this.errors[fieldName]
							}
						}
					},
					validateRegistrationThenSubmit() {
						// reset previous checkout failure errors
						delete this.errors['checkout']

						this?.registrationFields?.forEach(field => {
							if (field?.required) {
								this.validateOneField(field, field?.name)
							}
						})

						if (this.hasPurchasable) {
							this?.purchasables?.forEach((purch, purchIdx) => {
								(purch.registration_fields_copy || []).forEach((field) => {
									if (field?.required) {
										const searchMatchKey = `purch_${this.eventId}_${purch?.name}_field_${field?.name}`

										Object.keys(this.formData || {}).forEach(() => {
											const fieldCounterKey = `${purch?.name}_count_${purchIdx}`
											const fieldCount = parseInt(this?.formData?.[fieldCounterKey])
											for (let i = 0; i < fieldCount; i++) {
												const fieldName = `${searchMatchKey}_count_${i + 1}`;
												this.validateOneField(field, fieldName, i)
											}
										})
									}
								})
							})
						}
						if (Object.keys(this.errors).length === 0) {
							this.submitPurchase()
						}
					},
					handleCounterClick(self, direction, purchName, idx) {
						const inputElement = self.closest('.counter-click-container').querySelector('input[type="number"]');
						if (inputElement) {
							const modelName = `${purchName}_count_${idx}`
							if (modelName) {
								if (direction === 'up') {
									this.formData[modelName] = (parseInt(this.formData[modelName] || 0) + 1).toString();
								} else if (this.formData[modelName] > 0) {
									this.formData[modelName] = (parseInt(this.formData[modelName] || 0) - 1).toString();
								}
							}
						}
					},
				}
			}
		</script>
	}
}
