package pages

import (
	"context"
	"github.com/meetnearme/api/functions/gateway/constants"
	"github.com/meetnearme/api/functions/gateway/templates/components"
	"os"
	"strconv"
	"strings"
)

func extractMnmOptions(mnmOptions string) map[string]string {
	mnmOptionsMap := map[string]string{}
	parts := strings.Split(mnmOptions, ";")
	for _, part := range parts {
		parts := strings.Split(part, "=")
		if len(parts) == 2 {
			mnmOptionsMap[parts[0]] = parts[1]
		}
	}
	return mnmOptionsMap
}

templ AdminPage(userInfo constants.UserInfo, roleClaims []constants.RoleClaim, interests []string, userSubdomain, mnmOptions, userAbout string, ctx context.Context) {
	<h1 class="text-3xl">Admin</h1>
	<br/>
	<br/>
	<div id="admin-content-container" class="md:grid md:grid-cols-7" x-data="getAdminState()">
		@components.AdminNav(ctx)
		<div class="htmx-show-in-flight col-span-5 card border-2 border-base-300 bg-base-100 p-10 rounded-box">
			<template x-for="i in Array.from({length: 3}, (_, i) => i)" :key="i">
				<table class="table top-align bg-base-100 table-pin-rows table-pin-cols table-zebra">
					<tr class="border-t-2 border-base-300">
						<td><div class="skeleton h-4 w-full"></div></td>
						<td colspan="6">
							<div class="flex w-full flex-col gap-4">
								<div class="skeleton h-4 w-full"></div>
								<div class="skeleton h-4 w-1/2"></div>
								<div class="skeleton h-4 w-full"></div>
							</div>
						</td>
						<td><div class="skeleton h-4 w-full"></div></td>
						<td>
							<div class="skeleton h-4 w-full"></div>
						</td>
					</tr>
				</table>
			</template>
		</div>
		<div
			id="admin-content"
			class="htmx-hide-in-flight overflow-scroll col-span-5 card border-2 border-base-300 bg-base-100 p-10 rounded-box"
		>
			<h2 id="registration-history" class="text-2xl font-bold mt-4">Event Purchases &amp; Registrations</h2>
			<div>
				<template x-if="purchasesNextCursor">
					<a class="btn btn-sm float-end" :href=" window.location.pathname + '?purch_start_key=' + purchasesNextCursor">Show Next &rarr;</a>
				</template>
				<table class="table top-align bg-base-100 table-pin-rows table-pin-cols table-zebra">
					<thead>
						<tr>
							<th>Status</th>
							<th colspan="6">Purchase Type(s)</th>
							<th>Total</th>
							<th>Signup Time</th>
						</tr>
					</thead>
					<template x-if="!hasPurchasesResults">
						<template x-for="i in Array.from({length: 3}, (_, i) => i)" :key="i">
							<tr class="border-t-2 border-base-300">
								<td><div class="skeleton h-4 w-full"></div></td>
								<td colspan="6">
									<div class="flex w-full flex-col gap-4">
										<div class="skeleton h-4 w-full"></div>
										<div class="skeleton h-4 w-1/2"></div>
										<div class="skeleton h-4 w-full"></div>
									</div>
								</td>
								<td><div class="skeleton h-4 w-full"></div></td>
								<td>
									<div class="skeleton h-4 w-full"></div>
								</td>
							</tr>
						</template>
					</template>
					<tbody>
						<template x-if="hasPurchasesResults && purchases.length > 0">
							<template x-for="purchase in purchases" :key="purchase.composite_key">
								<tr
									class="border-t-2 border-base-300"
									:class="{ 'border-l-2 border-primary': newKeyId === purchase.composite_key }"
									:data-purch-key="purchase.composite_key"
								>
									<td x-text="getPurchaseStatus(purchase)"></td>
									<td colspan="6">
										<a class="link link-primary" :href="`/event/${purchase.event_id}`" x-text="purchase.event_name"></a>
										<template x-for="(item, idx) in purchase.purchased_items" :key="item.name">
											<div>
												<template x-if="idx >= 1">
													<div class="divider"></div>
												</template>
												<div x-text="item.name"></div>
												<div x-text="'Quantity: ' + item.quantity"></div>
												<div>
													<td x-text="`${item.cost > 0 ? '$' + (item.cost / 100).toFixed(2) : 'Free'}`"></td>
													<span x-text="item.currency"></span>
												</div>
												<div x-show="item.reg_responses && item.reg_responses.length > 0">
													<h2 class="text-md mt-2">Registration Responses</h2>
													<div class="card bg-base-100 px-4 py-2 my-2">
														<template x-for="(response, index) in item.reg_responses" :key="index">
															<div>
																<template x-if="index >= 1">
																	<div class="divider my-1"></div>
																</template>
																<template x-for="(value, key) in response" :key="key">
																	<div>
																		<span class="font-medium font-bold" x-text="key + ': '"></span>
																		<span x-text="value"></span>
																	</div>
																</template>
															</div>
														</template>
													</div>
												</div>
											</div>
										</template>
									</td>
									<td x-text="`${purchase.total > 0 ? '$' + (purchase.total / 100).toFixed(2) : 'Free'}`"></td>
									<td x-text="new Date(purchase.created_at * 1000).toLocaleString()"></td>
								</tr>
							</template>
						</template>
					</tbody>
					<tfoot>
						<tr>
							<th>Status</th>
							<th colspan="6">Purchase Type(s)</th>
							<th>Total</th>
							<th>Time</th>
						</tr>
					</tfoot>
				</table>
			</div>
			<h2 class="text-2xl font-bold ">My Info</h2>
			Name: { userInfo.Name }
			<br/>
			Email: { userInfo.Email }
			<br/>
			Verified:
			if userInfo.EmailVerified {
				Yes
			} else {
				No
			}
			<br/>
			ID: { userInfo.Sub }
			<br/>
			Locale: { userInfo.Locale }
			<br/>
			<br/>
			<h3 class="text-2xl font-bold">My Roles</h3>
			<div class="flex space-x-4 mb-4">
				for _, roleClaim := range roleClaims {
					<span class="badge badge-lg badge-primary">{ roleClaim.Role }</span>
				}
			</div>
			<h3 class="text-2xl font-bold">My Interests</h3>
			if len(interests) > 1 {
				<div class="mb-4">
					<ul>
						for _, interest := range interests {
							<li>
								- { interest }
							</li>
						}
					</ul>
				</div>
			}
			<p class="mb-4">Set your interests on the <a class="text-primary" href="/admin/profile/settings">interests page</a>.</p>
			<h3 class="text-2xl font-bold mb-4">My Subdomain</h3>
			{{ baseDomain := strings.TrimPrefix(os.Getenv("APEX_URL"), "https://") }}
			<div
				x-data={ `{
				subdomainPreview: '` + userSubdomain + `',
				subdomain: '` + userSubdomain + `',
				baseDomain: '` + baseDomain + `',
				handleSubdomainPostRes(event) {
					if (event.detail.successful) {
						this.subdomainPreview = this.subdomain;
					}
				}
			}` }
			>
				<p class="mb-4">
					View custom subdomain at
					<a
						class="link link-primary"
						x-bind:href=" 'https://' + subdomainPreview + '.' + baseDomain "
						x-text=" 'https://' + subdomainPreview + '.' + baseDomain "
					></a>
				</p>
				<form
					class="group"
					novalidate
					hx-post="/api/auth/users/update-mnm-options"
					hx-ext="json-enc"
					hx-target="#subdomain-result"
					hx-disabled-elt="button[type='submit']"
					@submit.prevent=""
					@htmx:after-request="handleSubdomainPostRes(event)"
					hx-vals="js:{...getMnmOptionsPayload()}"
				>
					<input
						id="subdomain"
						if userSubdomain != "" {
							value={ userSubdomain }
						}
						x-model="subdomain"
						pattern="[a-z0-9]+"
						:class="{ 'input-error': subdomain && !subdomain.match(/^[a-z0-9\-]+$/) }"
						name="subdomain"
						type="text"
						class="input input-bordered w-full"
					/>
					<div x-show="subdomain && !subdomain.match(/^[a-z0-9\-]+$/)" class="text-error text-sm mt-1">
						Subdomain must contain only lowercase letters and numbers and/or hyphens
					</div>
					<button type="submit" class="btn btn-primary mt-4">Update Subdomain<span class="htmx-indicator loading loading-spinner loading-sm"></span></button>
				</form>
				<div id="subdomain-result" class="margins-when-children my-8"></div>
				<h3 class="text-2xl font-bold mb-4 mt-4">Custom Theme</h3>
				<p>
					Your subdomain will use the theme colors you choose below.
					<div class="mx-auto w-full max-w-xl">
						<form
							class="group"
							novalidate
							hx-post="/api/auth/users/update-mnm-options?theme=1"
							hx-ext="json-enc"
							hx-target="#theme-result"
							hx-disabled-elt="button[type='submit']"
							@submit.prevent=""
							@htmx:after-request="handleSubdomainPostRes(event)"
							hx-vals="js:{...getMnmOptionsPayload()}"
						>
							{{ primaryColor := extractMnmOptions(mnmOptions)["--p"] }}
							@components.ColorPicker(primaryColor, "Primary Brand Color", "primary-color-picker-input")
							<h4 class="text-lg font-bold mt-2">Theme Mode</h4>
							<!-- END Input -->
							// switch toggle for light / vs dark theme
							{{ themeModeLight := extractMnmOptions(mnmOptions)["themeMode"] == "light" }}
							<div x-data={ `{ themeModeLight: ` + strconv.FormatBool(themeModeLight) + ` }` } class="form-control">
								<label class="label cursor-pointer">
									<span class="label-text" x-text="themeModeLight ? 'Light Theme' : 'Dark Theme' "></span>
									<input
										id="theme-mode"
										type="checkbox"
										class="toggle toggle-primary"
										x-model="themeModeLight"
									/>
								</label>
							</div>
							<button type="submit" class="btn btn-primary mt-4">Update Theme<span class="htmx-indicator loading loading-spinner loading-sm"></span></button>
						</form>
					</div>
				</p>
			</div>
			<div id="theme-result" class="margins-when-children my-8"></div>
			<h3 class="text-2xl font-bold mb-4 mt-4">About / Bio</h3>
			<form
				class="group"
				novalidate
				hx-post="/api/auth/users/update-about"
				hx-ext="json-enc"
				hx-target="#about-result"
				hx-disabled-elt="button[type='submit']"
				@submit.prevent=""
			>
				<div class="form-control">
					<label class="label" for="description">Description</label>
					<textarea
						name="about"
						class="textarea textarea-bordered w-full"
						maxlength="750"
						id="about"
						placeholder="Personal bio or organization description on your profile"
					>
						{ userAbout }
					</textarea>
				</div>
				<button type="submit" class="btn btn-primary mt-4">Update About<span class="htmx-indicator loading loading-spinner loading-sm"></span></button>
			</form>
			<div id="about-result" class="margins-when-children my-8"></div>
		</div>
	</div>
	<script id="admin-state" data-user-id={ userInfo.Sub } data-status-pending={ constants.PurchaseStatus.Pending } data-status-settled={ constants.PurchaseStatus.Settled }>
		// eslint-disable-next-line no-unused-vars
		function getMnmOptionsPayload() {
			const payload = {
				subdomain: document.getElementById('subdomain')?.value ?? '',
				primaryColor: document.getElementById('primary-color-picker-input')?.value ?? '',
				themeMode: document.getElementById('theme-mode')?.checked ? 'light' : 'dark',
			}
			return payload;
		}
		function getAdminState() {
			return {
				init() {
					(async () => {
						window.location.href.match('#')
						let searchQuery = window.location.hash.split('?')[1] || '';
						if (!window.location.href.match('#')) {
							searchQuery = window.location.search
						}
						this.newKeyId = new URLSearchParams(searchQuery).get('new_purch_key');
						const maxAttempts = 10;
						const delayMs = 250;
						let attempts = 0;

						const fetchPurchases = async () => {
							const startKey = new URLSearchParams(window.location.search).get('purch_start_key') ?? '';
							const reqUrl = `/api/purchases/user/${this.userId}${ startKey ? `?start_key=${encodeURIComponent(startKey)}` : '' }`;
							const purchasesResponse = await fetch(reqUrl);
							const purchasesResData = await purchasesResponse.json();
							this.purchases = purchasesResData.purchases ?? [];
							this.purchasesNextCursor = purchasesResData?.nextKey?.compositeKey?.Value;
							this.hasPurchasesResults = true;
						};

						const poll = async () => {
							try {
								await fetchPurchases();

								// If we're not looking for a specific purchase, or if we found it, stop polling
								if (!this.newKeyId || this.purchases.some(p => p.composite_key === this.newKeyId)) {
									if (this.purchases.some(p => p.composite_key === this.newKeyId)) {
										const purchaseRow = document.querySelector(`[data-purch-key="${this.newKeyId}"]`);
										if (purchaseRow) {
											purchaseRow.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });
										}
									}
									return;
								}

								// Continue polling if we haven't reached max attempts
								if (attempts < maxAttempts) {
									attempts++;
									await new Promise(resolve => setTimeout(resolve, delayMs));
									await poll();
								}
							} catch (error) {
								// eslint-disable-next-line no-console
								console.error('Failed to fetch purchases:', error);
							}
						};

						await poll();
					})()
				},
				newKeyId: null,
				purchases: [],
				hasPurchasesResults: false,
				purchasesNextCursor: null,
				userId: document.querySelector('#admin-state').getAttribute('data-user-id'),
				statusPending: document.querySelector('#admin-state').getAttribute('data-status-pending'),
				statusSettled: document.querySelector('#admin-state').getAttribute('data-status-settled'),
				getPurchasesNextLink() {
					return window.location.href + '?purch_start_key=' + this.purchasesNextCursor + '_' + this.userId;
				},
				// handleSubdomainPostRes: function(event) {
				// 	// eslint-disable-next-line no-console
				// 	console.log(event)
				// },
				getPurchaseStatus(purchase) {
					return purchase.status.replace(this.statusSettled, 'PAID').replace(this.statusPending, 'INCOMPLETE')
				}
			}
		}
	</script>
}
