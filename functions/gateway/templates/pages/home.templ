package pages

import (
	"github.com/google/uuid"
	"github.com/meetnearme/api/functions/gateway/helpers"
	"github.com/meetnearme/api/functions/gateway/templates/components"
	"github.com/meetnearme/api/functions/gateway/types"
	"log"
	"os"
	"strconv"
	"strings"
)

script navigateToSlideHandler(index int) {
		const currentIndex = parseInt(document.getElementById('current-slide-index').value);
		const newIndex = currentIndex + index;
		const totalSlides = document.querySelectorAll('.carousel-item').length;

		// Only proceed if newIndex is within bounds (0 to totalSlides-1)
		if (newIndex >= 0 && newIndex < totalSlides) {
				const slide = document.getElementById(`slide-${newIndex}`);
				if (slide) {
						slide.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });
						document.getElementById('current-slide-index').value = newIndex;
						if (newIndex == 0) {
								document.getElementsByClassName('carousel-control-left')[0].classList.add('hidden');
						} else {
								document.getElementsByClassName('carousel-control-left')[0].classList.remove('hidden');
						}
						if (newIndex == totalSlides - 1) {
								document.getElementsByClassName('carousel-control-right')[0].classList.add('hidden');
						} else {
								document.getElementsByClassName('carousel-control-right')[0].classList.remove('hidden');
						}
				}
		}
}

templ EventsInner(events []types.Event, mode string) {
	if mode == helpers.EV_MODE_UPCOMING || mode == "" {
		if (len(events) < 1) {
			<p class="text-md md:text-lg text-center mt-5">
				No events found, try changing your filters like location, date, and time, or
				<br/>
				<br/>
				<a class="btn btn-primary btn-small" href={ templ.SafeURL("/?radius=" + strconv.FormatFloat(helpers.DEFAULT_EXPANDED_SEARCH_RADIUS, 'f', -1, 64)) }>Expand Your Search</a>
			</p>
		} else {
			for _, ev := range events {
				<div class="flex w-full relative pb-24 md:pb-4">
					<a data-umami-event={ "event-list-clk" } data-umami-event-event-id={ ev.Id } class="flex w-full" href={ templ.URL("/event/" + ev.Id) }>
						<img
							loading="lazy"
							src={ helpers.GetImgUrlFromHash(ev) }
							alt=""
							class="object-cover object-position-25-25 w-full aspect-[4/3] md:aspect-[16/9] opacity-50 md:opacity-30 md:hover:opacity-75 transition-all"
						/>
					</a>
					<div class="flex flex-col justify-between w-full p-4 md:p-12 bg-gradient-to-t from-base-100/70 from-80% to-transparent absolute bottom-0 left-0">
						<div class="mb-2">
							<h2 class="text-2xl md:text-3xl">{ ev.Name }</h2>
							<p class="text-sm md:text-base">{ helpers.GetDateOrShowNone(ev.StartTime, ev.Timezone) } | { helpers.GetTimeOrShowNone(ev.StartTime, ev.Timezone) } &commat; { ev.Address }</p>
						</div>
						<br/>
						<a data-umami-event={ "event-list-clk" } data-umami-event-event-id={ ev.Id } href={ templ.URL("/event/" + ev.Id) } class="btn btn-primary btn-block mb-2 md:mb-3">
							LEARN MORE
							&rarr;
						</a>
					</div>
				</div>
			}
		}
	}
	if mode == helpers.EV_MODE_CAROUSEL {
		if (len(events) < 1) {
			<p class="text-md md:text-lg text-center mt-5">
				This event series has no events yet.
			</p>
		} else {
			<div class="carousel-container relative w-full">
				<div class="carousel rounded-box max-w-full relative mb-4">
					<input type="hidden" id="current-slide-index" value="0"/> <!-- Hidden input to track current slide -->
					for idx, ev := range events {
						<div id={ "slide-" + strconv.Itoa(idx) } class="carousel-item bg-base-200 flex-shrink-0 w-48 snap-start mr-4 last:mr-0 whitespace-nowrap">
							<a href={ templ.URL("/event/" + ev.Id) } class="block p-4 rounded-lg">
								<div class="text-lg font-semibold">{ helpers.GetDateOrShowNone(ev.StartTime, ev.Timezone) }</div>
								<div class="text-md">{ helpers.GetTimeOrShowNone(ev.StartTime, ev.Timezone) }</div>
							</a>
						</div>
					}
				</div>
				<button
					class="btn btn-circle carousel-control-left hidden"
					onClick={ navigateToSlideHandler(-1) }
				>‚ùÆ</button>
				<button
					class="btn btn-circle carousel-control-right"
					onClick={ navigateToSlideHandler(1) }
				>‚ùØ</button>
			</div>
		}
	}
	if mode == helpers.EV_MODE_LIST {
		if (len(events) < 1) {
			<p class="text-md md:text-lg text-center mt-5">
				No events found.
				<br/>
				<br/>
				<a class="btn btn-primary btn-small" href={ templ.SafeURL("/?radius=" + strconv.FormatFloat(helpers.DEFAULT_EXPANDED_SEARCH_RADIUS, 'f', -1, 64)) }>Expand Your Search</a>
			</p>
		} else {
			for _, ev := range events {
				<div class="flex w-full relative pb-12 md:pb-4">
					<a data-umami-event={ "event-list-clk" } data-umami-event-event-id={ ev.Id } class="flex w-full" href={ templ.URL("/event/" + ev.Id) }>
						<img
							loading="lazy"
							src={ helpers.GetImgUrlFromHash(ev) }
							alt=""
							class="object-cover object-position-25-25 w-full aspect-[4/1] md:aspect-[4/1] opacity-30 md:hover:opacity-75 transition-all"
						/>
					</a>
					<div class="flex justify-between w-full p-4 md:py-8 bg-gradient-to-t from-base-100/70 from-80% to-transparent absolute bottom-0 left-0">
						<div class="mb-2">
							<h2 class="text-xl font-bold">{ ev.Name }</h2>
							<p class="text-sm md:text-base">{ helpers.GetDateOrShowNone(ev.StartTime, ev.Timezone) } | { helpers.GetTimeOrShowNone(ev.StartTime, ev.Timezone) } &commat; { ev.Address }</p>
						</div>
						<a data-umami-event={ "event-list-clk" } data-umami-event-event-id={ ev.Id } href={ templ.URL("/event/" + ev.Id) } class="btn btn-primary mb-2 md:mb-3">
							if ev.HasPurchasable {
								BUY TICKETS
								&rarr;
							} else {
								LEARN MORE
								&rarr;
							}
						</a>
					</div>
				</div>
			}
		}
	}
	if mode == helpers.EV_MODE_ADMIN_LIST {
		<h3 class="text-2xl font-bold my-10">Event Admin</h3>
		<table class="table top-align bg-base-100 table-pin-rows table-pin-cols table-zebra">
			<thead>
				<tr>
					<th>Event</th>
					<th>Status</th>
					<th>Start</th>
					<th>End</th>
					<th>Type</th>
					<th>Created</th>
					<th>Updated</th>
				</tr>
			</thead>
			<tbody>
				for _, ev := range events {
					<tr class="border-t-2 border-base-300">
						<td>
							<a class="link link-text" href={ templ.URL("/admin/event/" + ev.Id + "/edit") }>{ ev.Name }</a>
						</td>
						<td>
							if strings.HasPrefix(ev.EventSourceType, helpers.UNPUB_SUFFIX) {
								Unpublished
							} else {
								Published
							}
						</td>
						<td>
							{ helpers.FormatTimeMMDDYYYY(ev.StartTime) }
						</td>
						<td>
							{ helpers.FormatTimeMMDDYYYY(ev.EndTime) }
						</td>
						<td>
							if ev.EventSourceType == helpers.ES_SERIES_PARENT || ev.EventSourceType == helpers.ES_SERIES_PARENT_UNPUB {
								Series
							} else {
								Event
							}
						</td>
						<td>
							{ helpers.FormatTimeMMDDYYYY(ev.CreatedAt) }
						</td>
						<td>
							{ helpers.FormatTimeMMDDYYYY(ev.UpdatedAt) }
						</td>
					</tr>
				}
			</tbody>
		</table>
	}
}

func GetCityCountryFromLocation(cfLocation helpers.CdnLocation, latStr, lonStr, origLat, origLon, origQueryLocation string) string {
	if origQueryLocation != "" {
		return origQueryLocation
	} else if cfLocation.City != "" && cfLocation.CCA2 != "" {
		return cfLocation.City + ", " + cfLocation.CCA2
	} else if latStr != "" && lonStr != "" {
		return latStr + ", " + lonStr
	} else if cfLocation.City == "" && origLat != "" && origLon != "" {
		return origLat + ", " + origLon
	} else {
		return helpers.Cities[0].City + ", " + helpers.Cities[0].State
	}
}

func GetCitiesAsJsonStr() string {
	cityData := make([]map[string]interface{}, 0, 200)
	for _, city := range helpers.Cities[:50] {
		cityData = append(cityData, map[string]interface{}{
			"id":        uuid.New(),
			"name":      city.City,
			"state":     city.State,
			"latitude":  city.Latitude,
			"longitude": city.Longitude,
			"label":     city.City + ", " + city.State + ", US",
		})
	}

	cityStateJsonString, err := templ.JSONString(cityData)
	if err != nil {
		// Handle the error appropriately
		log.Printf("Error creating JSON string: %v", err)
		cityStateJsonString = "[]" // Fallback to empty array
	}

	return cityStateJsonString
}

templ FilterButton() {
	<button type="button" onclick="document.getElementById('flyout-tab-filters').click(); document.getElementById('main-drawer').click();" style="display: inline-block;" class="btn btn-ghost">
		@components.Icon("filter")
	</button>
}

func GetPageUserID(pageUser *types.UserSearchResult) string {
	if pageUser == nil {
		return ""
	}
	return pageUser.UserID
}

func GetDefaultRadius(cfLocation helpers.CdnLocation) string {
	if cfLocation.City == "" {
		return strconv.FormatFloat(helpers.DEFAULT_EXPANDED_SEARCH_RADIUS, 'f', -1, 64)
	}
	return strconv.FormatFloat(helpers.DEFAULT_SEARCH_RADIUS, 'f', -1, 64)
}

templ HomePage(events []types.Event, pageUser *types.UserSearchResult, cfLocation helpers.CdnLocation, latStr, lonStr, origLat, origLong, origQueryLocation string) {
	// we assume this is "home" and not a community / user profile page
	if pageUser == nil {
		<div class="header-hero bg-[#00ffzz]">
			<h1 class="text-xl md:text-4xl text-center mb-5">
				<span class="opener">People Over Screens!</span>
				<br/>
				<span>Find Connection at Local Events.</span>
				// <span class="opener">Journey to exotic realms <br/> unreachable by AI bots üöÄ</span>
			</h1>
		</div>
	} else {
		<div class="space-y-10" x-data="getCompetitionsState()">
			<h1 class="text-5xl alt-title font-bold text-center uppercase">{ pageUser.DisplayName }</h1>
			if pageUser.Metadata != nil && pageUser.Metadata[helpers.META_ABOUT_KEY] != "" {
				<h2 class="text-3xl font-bold uppercase my-10">About</h2>
				<div class="prose prose-invert max-w-none">
					@templ.Raw(pageUser.Metadata[helpers.META_ABOUT_KEY])
				</div>
			}
			<template x-if="competitions?.length">
				<div>
					<h2 class="text-3xl font-bold uppercase my-10">Competitions</h2>
					<template x-for="competition in competitions">
						<div>
							<h3 x-text="competition.name" class="text-2xl font-bold my-10"></h3>
							<h4 class="text-xl font-bold my-2 uppercase">Schedule</h4>
							<template x-if="rounds && rounds[competition.id]">
								<div>
									<template x-for="(eventRounds, eventId) in rounds[competition.id]">
										<div>
											<template x-if="eventId !== fakeEventId">
												<h3 class="text-xl font-bold my-2">
													<a class="link link-text" :href="`/event/${eventId}`">
														Event #<span x-text="Object.keys(rounds[competition.id]).indexOf(eventId) + 1"></span>
													</a>
												</h3>
											</template>
											<template x-if="eventId === fakeEventId">
												<h3 class="text-xl font-bold my-2">Upcoming</h3>
											</template>
											<template x-for="round in eventRounds">
												<div class="flex justify-between">
													<template x-if="round?.isVotingOpen">
														<div>
															<div class="tooltip tooltip-right w-6 mr-2" data-tip="Voting Open">
																<span aria-label="Voting Open" class="loading loading-ring loading-xs text-primary"></span>
															</div>
															<span class="badge badge-primary mr-2">Voting Open</span>
														</div>
													</template>
													<template x-if="!round?.isVotingOpen">
														<div class="w-6 mr-2"></div>
													</template>
													<div class="grow" x-text="round?.roundName"></div>
												</div>
											</template>
										</div>
									</template>
								</div>
							</template>
							<div class="divider my-10"></div>
							<template x-if="leaderboards && leaderboards[competition.id]">
								<div>
									<h3 class="text-xl font-bold my-2 uppercase">Standings</h3>
									<template x-for="[teamId, score] in Object.entries(leaderboards[competition.id])">
										<div class="flex justify-between border-b border-gray-700">
											<div x-text="users?.find?.(user => user?.userId === teamId)?.displayName"></div>
											<div x-text="'Score: ' + score"></div>
										</div>
									</template>
								</div>
							</template>
						</div>
					</template>
				</div>
			</template>
		</div>
	}
	<div
		class="min-h-screen"
	>
		<div x-data="getHomeState()">
			<div class="card border border-base-300 bg-base-200 p-4 pb-2 md:p-10 md:pb-6 rounded-box mb-4">
				<div class="mb-4 relative">
					<div class="flex gap-2 items-center overflow-x-auto pb-3">
						<template x-for="(example, index) in $store.filters.getSearchExamples()" :key="index">
							<button
								@click="handleSearchSuggestionChipClick(event, example)"
								class="btn btn-sm btn-outline font-thin flex-shrink-0 whitespace-nowrap"
								x-text="example"
							></button>
						</template>
					</div>
					<!-- Fade indicator for more content -->
					<div class="absolute right-0 top-0 bottom-0 w-8 bg-gradient-to-l from-base-200 to-transparent pointer-events-none"></div>
				</div>
				// full width search bar
				<form class="join w-full" @submit.prevent="Alpine.store('filters').handleSearchSubmit($event, false)">
					<label class="input input-bordered flex join-item items-center gap-2 w-full">
						<input
							id="search-input"
							class="w-full grow"
							type="text"
							placeholder="I want to exercise with a group"
							x-model="Alpine.store('filters').q"
						/>
						@FilterButton()
					</label>
					<button
						type="submit"
						id="search-submit-btn"
						class="btn btn-primary join-item"
					>Search</button>
				</form>
				<div class="text-sm md:text-base mt-6 mb-2">
					Showing events within <span class="font-bold" x-text="$store.filters.radius"></span> miles of
					<a
						class="link link-text font-bold"
						:href=" $store.location?.selected?.label?.match?.(/^[0-9]|\-/)?.length ? `https://google.com/maps/@${$store.location?.selected?.label?.replace(' ', '')},15z` : `https://google.com/maps?q=${$store.location?.selected?.label}` "
					>
						<span x-text="$store.location?.selected?.label?.match?.(/^[0-9]|\-/)?.length > 0 ? 'Geocoordinates ' + $store.location?.selected?.label : $store.location?.selected?.label"></span>
					</a> <button @click="document.getElementById('flyout-tab-filters').click(); document.getElementById('main-drawer').click();" class="btn btn-xs bg-base-300">Modify</button>
				</div>
			</div>
			<div class="pb-4">
				<form
					id="event-search-form"
					class="flex"
					novalidate
					if pageUser == nil {
						hx-get="/api/html/events"
					} else {
						hx-get={ `/api/html/events?list_mode=` + helpers.EV_MODE_LIST }
					}
					hx-indicator="#events-container"
					hx-ext="json-enc"
					hx-target="#events-container-inner"
					hx-disabled-elt="button[type='submit']"
					@submit.prevent=""
					hx-vals="js:{...sendParmsFromQs()}"
				>
					<input
						x-model="start_time"
						id="start_time"
						type="hidden"
					/>
					<input
						x-model="end_time"
						id="end_time"
						type="hidden"
					/>
					<input
						x-model="q"
						id="q"
						type="hidden"
					/>
					<input
						x-model="$store.filters.radius"
						id="radius"
						type="hidden"
					/>
					<input
						x-model="lat"
						id="lat"
						type="hidden"
					/>
					<input
						x-model="lon"
						id="lon"
						type="hidden"
					/>
					<div class="flex flex-auto space-x-2">
						<button
							type="submit"
							:class="{
							'btn-primary': $store.queryParams.start_time === 'this_month'
						}"
							class="btn grow px-2 py-2 text-md md:text-xl "
							@click="Alpine.store('queryParams').pushToQueryParams('start_time', 'this_month')"
						>
							THIS MONTH
						</button>
						<button
							type="submit"
							:class="{
							'btn-primary': $store.queryParams.start_time === 'today'
						}"
							class="btn grow px-2 py-2 text-md md:text-xl "
							@click="Alpine.store('queryParams').pushToQueryParams('start_time', 'today')"
						>
							TODAY
						</button>
						<button
							type="submit"
							:class="{
							'btn-primary': $store.queryParams.start_time === 'tomorrow'
						}"
							class="btn grow px-2 py-2 text-md md:text-xl "
							@click="Alpine.store('queryParams').pushToQueryParams('start_time', 'tomorrow')"
						>
							TOMORROW
						</button>
						<button
							type="submit"
							:class="{
							'btn-primary': $store.queryParams.start_time === 'this_week'
						}"
							class="btn grow px-2 py-2 text-md md:text-xl "
							@click="Alpine.store('queryParams').pushToQueryParams('start_time', 'this_week')"
						>
							THIS WEEK
						</button>
					</div>
				</form>
			</div>
		</div>
		<main id="events-container">
			if pageUser == nil {
				<div class="htmx-indicator flex flex-wrap items-center justify-center my-4">
					<span class="loading loading-spinner loading-lg text-primary"></span>
				</div>
				<div id="events-container-inner">
					@EventsInner(events, "")
				</div>
			} else {
				<div role="tablist" class="tabs tabs-bordered">
					<input
						type="radio"
						name="org-events-tabs"
						role="tab"
						class="tab text-lg leading-5 uppercase"
						aria-label="Upcoming"
						checked="checked"
					/>
					<div role="tabpanel" class="tab-content py-10">
						<div class="htmx-indicator flex flex-wrap items-center justify-center my-4">
							<span class="loading loading-spinner loading-lg text-primary"></span>
						</div>
						<div id="events-container-inner">
							@EventsInner(events, helpers.EV_MODE_LIST)
						</div>
					</div>
					<input
						type="radio"
						name="org-events-tabs"
						role="tab"
						class="tab text-lg leading-5 uppercase"
						aria-label="Past"
					/>
					<div role="tabpanel" class="tab-content p-10">(Coming Soon...)</div>
				</div>
			}
		</main>
	</div>
	<script id="alpine-state" data-cities-default-list={ GetCitiesAsJsonStr() } data-city-label-initial={ GetCityCountryFromLocation(cfLocation, latStr, lonStr, origLat, origLong, origQueryLocation) } data-city-latitude-initial={ latStr } data-city-longitude-initial={ lonStr } data-page-user-id={ GetPageUserID(pageUser) } data-fake-event-id={ helpers.COMP_UNASSIGNED_ROUND_EVENT_ID } data-apex-url={ os.Getenv("APEX_URL") } data-default-radius={ GetDefaultRadius(cfLocation) }>
		document.addEventListener('alpine:init', () => {

			const urlParams = new URLSearchParams(window.location.search);

			const categoriesParam = urlParams.get('categories');
			const categories = categoriesParam ? decodeURIComponent(categoriesParam).split(' | ') : '';

			Alpine.store('filters', {
				radius: urlParams.get('radius') ?? document.querySelector('#alpine-state').getAttribute('data-default-radius'),
				lat: urlParams.get('lat') ?? document.querySelector('#alpine-state').getAttribute('data-city-latitude-initial'),
				lon: urlParams.get('lon') ?? document.querySelector('#alpine-state').getAttribute('data-city-longitude-initial'),
				categories: categories,
				q: urlParams.get('q') ?? '',
				setRadius(value) {
					this.radius = value;
				},
				setLat(value) {
					this.lat = value;
				},
				setLon(value) {
					this.lon = value;
				},
				setQ(value) {
					this.q = value;
				},
				handleSearchSubmit(e, toggleDrawer = true) {
					e.preventDefault()
					// this is not extremely precise, we can data bind the input if we need to
					const inputText = e.currentTarget.parentElement.querySelector('input[type="text"]').value
					if (inputText.length > 0) {
						Alpine.store('filters').setQ(inputText)
						Alpine.store('queryParams').pushToQueryParams('q', inputText)
						if (toggleDrawer) {
							document.getElementById('main-drawer').click();
						}
					}
				},
				getSearchExamples() {
					const searchPlaceholderExamples = [
							'I want to meet people who enjoy theater',
							'I want to meet active people',
							'I want to exercise with a group',
							'I want to find a running group',
							'I want to find a hiking group',
							'I want to find a biking group',
							'I want to find a yoga group',
							'I want to find a dance group',
							'I want to find a cooking group',
							'I want to find a book club',
							'I want to find a wine tasting group',
							'I want to meet people interested in nature',
							'I want to meet people interested in natural living',
							'I want to meet people interested in healthy eating',
							'I want to meet people interested in sustainable living',
							'I want to meet people interested in alternative medicine',
							'I want to meet people interested in spirituality',
							'I want to meet people interested in personal development',
							'I want to meet people interested in personal growth',

						]
					const shuffleArray = array => {
						for (let i = array.length - 1; i > 0; i--) {
							const j = Math.floor(Math.random() * (i + 1));
							[array[i], array[j]] = [array[j], array[i]];
						}
						return array;
					}
					const shuffledExamples = shuffleArray([...searchPlaceholderExamples])
					return shuffledExamples
				}
			});

			Alpine.store('location', {
				selected: {
					label: document.querySelector('#alpine-state').getAttribute('data-city-label-initial'),
					latitude: document.querySelector('#alpine-state').getAttribute('data-city-latitude-initial'),
					longitude: document.querySelector('#alpine-state').getAttribute('data-city-longitude-initial'),
				},
				setSelectedLocation(location) {
					this.selected = location
				},
			});

			Alpine.store('queryParams', {
				allParams: [
					'start_time',
					'end_time',
					'q',
					'radius',
					'lat',
					'lon',
					'categories',
					'location'
				],
				pushToQueryParams(param, selected) {
					const url = new URL(window.location.href);
					const params = new URLSearchParams(url.search);

					this.allParams.forEach(key => {
						if ( key && param && (key !== param && ( this[key] !== (null || '') ) ) ) {
							if (this[key]) {
								params.set(key, this[key])
							}
						}
					})

					this[param] = selected;
					params.set(param, selected);

					window.history.pushState({}, '', `${url.pathname}?${params.toString()}`);
				},
			});
		});

		// NOTE: this is used by htmx to get the data-attributes
		// eslint-disable-next-line no-unused-vars
		function sendParmsFromQs() {
			const urlParams = new URLSearchParams(window.location.search);
			return {
				...(document.querySelector('#alpine-state').getAttribute('data-page-user-id') !== "") ? { owners: document.querySelector('#alpine-state').getAttribute('data-page-user-id') } : {},
				...(urlParams.get('start_time')?.length > 1) ? { start_time: urlParams.get('start_time') } : {},
				...(urlParams.get('end_time')?.length > 1) ? { end_time: urlParams.get('end_time') } : {},
				...(urlParams.get('q')?.length > 1) ? { q: urlParams.get('q') } : {},
				...(urlParams.get('radius')?.length > 1) ? { radius: urlParams.get('radius') } : {},
				...(urlParams.get('lat')?.length > 1) ? { lat: urlParams.get('lat') } : {},
				...(urlParams.get('lon')?.length > 1) ? { lon: urlParams.get('lon') } : {},
				...(urlParams.get('categories')?.length > 1) ? { categories: urlParams.get('categories') } : {},

			}
		}

		function getLocationSearchState() {
			return {
				allOptions: JSON.parse(
					document.querySelector('#alpine-state').getAttribute('data-cities-default-list')
				).map((city) => ({
					label: city.label,
					value: city.id,
					latitude: city.latitude,
					longitude: city.longitude,
				})),
				options: [],
				isOpen: false,
				openedWithKeyboard: false,
				isLoading: false,
				selectedOption: {
					label: Alpine.store('location').selected.label,
					latitude: Alpine.store('location').selected.latitude,
					longitude: Alpine.store('location').selected.longitude,
				},
				async fetchLocations(query) {
					if (query.length >= 3) {
						this.isLoading = true;
						this.options = await fetch(`/api/locations?q=${query}`).then(res => {
							return res.json()
						}).then(json => {
							return json.map((city) => ({
								label: city.label,
								value: city.id,
								latitude: city.latitude,
								longitude: city.longitude,
							}))
						})
						.catch(error => {
              // eslint-disable-next-line no-console
							console.error('Error fetching locations:', error);
							return [];
						})
						.finally(() => {
							this.isLoading = false;
						});
					}
				},
				setSelectedOption(option) {
					this.selectedOption = option

					this.isOpen = false
					this.openedWithKeyboard = false
					this.$refs.hiddenTextField.value = option.value
					// Update lat and lon in the parent component
					this.$dispatch('location-dropdown', { option: { ...option } })
				},
				getFilteredOptions(query) {
					this.options = this.allOptions.filter((option) =>
						option.label.toLowerCase().includes(query.toLowerCase()),
					)
					if (this.options.length === 0) {
						this.$refs.noResultsMessage.classList.remove('hidden')
					} else {
						this.$refs.noResultsMessage.classList.add('hidden')
					}
				},
				handleKeydownOnOptions(event) {
					// if the user presses backspace or the alpha-numeric keys, focus on the search field
					if (/^[a-zA-Z0-9]$/.test(event.key) || event.key === 'Backspace') {
						this.$refs.loc_search.focus()
					}
				},
			}
		}

		function getHomeState() {
			return {
				async init() {
					this.updateParamsFromUrl(false);

					// enhance history.pushState with a listener and call it on every
					// change of query params so that our URL can be the real source
					// of truth while JS state simply follows that
					((history) => {
						var pushState = history.pushState;
						history.pushState = function(state) {
							if (typeof history.onpushstate == "function") {
								history.onpushstate({state: state});
							}
							// whatever else you want to do
							// maybe call onhashchange e.handler
							return pushState.apply(history, arguments);
						}
					})(window.history);

					window.onpopstate = history.onpushstate = () => {
						this.updateParamsFromUrl();
					};

					// Also listen for popstate events for back/forward navigation
					window.addEventListener('popstate', () => {
						this.updateParamsFromUrl();
					});
				},
				pageUserId: document.querySelector('#alpine-state').getAttribute('data-page-user-id'),
				defaultRadius: document.querySelector('#alpine-state').getAttribute('data-default-radius'),
				start_time: null,
				end_time: null,
				q: null,
				radius: null,
				lat: null,
				lon: null,
				categories: null,
				locationDropdown: null,
				updateParamsFromUrl (triggerSearch = true) {
					const urlParams = new URLSearchParams(window.location.search);

					this.start_time = urlParams.get('start_time') || '';
					this.end_time = urlParams.get('end_time') || '';
					this.q = urlParams.get('q') || '';
					if (urlParams.get('radius')) {
						Alpine.store('filters').setRadius(urlParams.get('radius'));
					}
					this.lat = urlParams.get('lat') || '';
					this.lon = urlParams.get('lon') || '';
					// these come from the sidebar
					this.categories = urlParams.get('categories') || '';

					// avoid re-triggering search for scenarios like initial page load
					if (!triggerSearch) {
						return;
					}
					// Submit the form
					const form = document.getElementById('event-search-form')

					// this is unforunately just to allow alpine to propagate the form with
					// updated values prior to submitting
					setTimeout(()=> {
						form?.requestSubmit()
					}, 250)
				},
				handleLocationSelected(event) {
					this.lat = event.detail.lat
					this.lon = event.detail.lon
				},
				updateHasEvents(event) {
					if (event.detail.successful && document.querySelector('#event-candidates-inner').querySelectorAll('input[type="checkbox"]').length > 0 ){
						this.hasEvents = true;
					} else {
						this.hasEvents = false;
					}
				},
				handleSearchSuggestionChipClick(e, text) {
					e.preventDefault()
					Alpine.store('filters').setQ(text)
					Alpine.store('queryParams').pushToQueryParams('q', text)
				}
			}
		}

		// NOTE: this maintains an intentionally independent state from Alpine.store('filters').radius
		// because the sidebar stores a "draft" state that is committed to URL params
		// and Alpine global state only when the user clicks "Apply Filters"
		function getFilterFormState() {
				return {
					init() {
						this.radius = Alpine.store('filters').radius

						const form = document.getElementById('category-search-form')
						form.querySelectorAll('input[type="checkbox"]').forEach(itm => {
							if (Alpine.store('filters').categories.includes(itm.value)) {
								itm.checked = true
							}
						})

						const searchPlaceholderExamples = [
							'I want to meet people who enjoy theater',
							'I want to meet active people',
							'I want to exercise with a group',
							'I want to find a running group',
							'I want to find a hiking group',
							'I want to find a biking group',
							'I want to find a yoga group',
							'I want to find a dance group',
							'I want to find a cooking group',
							'I want to find a book club',
							'I want to find a wine tasting group',
							'I want to meet people interested in nature',
							'I want to meet people interested in natural living',
							'I want to meet people interested in healthy eating',
							'I want to meet people interested in sustainable living',
							'I want to meet people interested in alternative medicine',
							'I want to meet people interested in spirituality',
							'I want to meet people interested in personal development',
							'I want to meet people interested in personal growth',

						]

						const searchInput = document.querySelector('#search-input')
						if (searchInput) {
							// Fisher-Yates shuffle algorithm
							const shuffleArray = array => {
								for (let i = array.length - 1; i > 0; i--) {
									const j = Math.floor(Math.random() * (i + 1));
									[array[i], array[j]] = [array[j], array[i]];
								}
								return array;
							}

							// Shuffle the array once
							const shuffledExamples = shuffleArray([...searchPlaceholderExamples])
							let currentIndex = 0

							const updatePlaceholder = () => {
								searchInput.placeholder = shuffledExamples[currentIndex]
								currentIndex = (currentIndex + 1) % shuffledExamples.length
							}

							// Set initial placeholder
							updatePlaceholder()

							// Update every 5 seconds
							setInterval(updatePlaceholder, 2500)
						}
					},
					radius: null,
					locationDropdown: null,
					sendCategoriesToQueryParams() {
						const form = document.getElementById('category-search-form')
						// Collect form values
						const formData = new FormData(form);
						const formValues = Object.fromEntries(formData.entries());
						let formVals = []
						Object.keys(formValues).forEach(itm => {
							if (itm.startsWith('itm-')) {
								formVals.push(formValues?.[itm])
							}
						})
						formVals = formVals.join(' | ')
						Alpine.store('queryParams').pushToQueryParams('categories', formVals)
					},
					handleFilterSubmit() {
						this.sendCategoriesToQueryParams();
						if (this.radius) {
							Alpine.store('filters').setRadius(this.radius)
							Alpine.store('queryParams').pushToQueryParams('radius', this.radius)
						}
						if (this.locationDropdown) {
							Alpine.store('filters').setLat(this.locationDropdown.latitude)
							Alpine.store('filters').setLon(this.locationDropdown.longitude)
							Alpine.store('location').setSelectedLocation(this.locationDropdown)

							Alpine.store('queryParams').pushToQueryParams('lat', this.locationDropdown.latitude)
							Alpine.store('queryParams').pushToQueryParams('lon', this.locationDropdown.longitude)
							Alpine.store('queryParams').pushToQueryParams('location', this.locationDropdown.label)
						}

						// close the drawer
						document.getElementById('main-drawer').click();
					},
				}
			}

		function getCompetitionsState() {
			return {
				async init() {
					await fetch(`/api/competition-config/owner/${this.pageUserId}`).then(res => {
						return res.json()
					}).then(json => {
						const _competitions = json.filter(competition => {
							return competition.endTime > new Date().getTime() / 1000
						})
						this.competitions = _competitions
					});

					// Create an array of promises for fetching competition rounds and leaderboards
					const fetchPromises = this.competitions.flatMap(competition => [
						// Fetch rounds
						fetch(`/api/competition-round/competition/${competition.id}`)
							.then(response => response.json())
							.catch(error => {
								// eslint-disable-next-line no-console
								console.error(`Error fetching rounds for competition ${competition.id}:`, error);
								return null;
							}),
						// Fetch leaderboard
						fetch(`/api/competition-round/competition-sum/${competition.id}`)
							.then(response => response.json())
							.catch(error => {
								// eslint-disable-next-line no-console
								console.error(`Error fetching leaderboard for competition ${competition.id}:`, error);
								return null;
							})
					]);

					// Wait for all requests to complete
					try {
						const results = await Promise.all(fetchPromises);
						// Process results in pairs (rounds and leaderboard for each competition)
						this.rounds = {};
						this.leaderboards = {};
						for (let i = 0; i < results.length; i += 2) {
							const roundsArray = results[i];
							const leaderboardData = results[i + 1];
							if (roundsArray && roundsArray.length > 0) {
								// Group rounds by eventId
								const roundsByEvent = roundsArray.reduce((acc, round) => {
									if (!acc[round.eventId]) {
										acc[round.eventId] = [];
									}
									acc[round.eventId].push(round);
									return acc;
								}, {});
								this.rounds[roundsArray[0].competitionId] = roundsByEvent;
							}
							if (leaderboardData) {
								// Sort the entries by score in descending order
								const sortedEntries = Object.entries(leaderboardData)
									.sort(([, scoreA], [, scoreB]) => scoreB - scoreA);

								// Convert back to object while maintaining sorted order
								this.leaderboards[this.competitions[i / 2].id] = Object.fromEntries(sortedEntries);
							}
						}
					} catch (error) {
						// eslint-disable-next-line no-console
						console.error('Error fetching competition data:', error);
					}

					try {
						const userIds = Object.values(this.leaderboards)
							.flatMap(leaderboard => Object.keys(leaderboard))
							.join(',');
						if (userIds.length > 0) {
							const users = await fetch(`/api/users?ids=${userIds}`).then(res => {
								return res.json()
							})
							this.users = users
						}
					} catch (error) {
						// eslint-disable-next-line no-console
						console.error('Error fetching users:', error);
					}
				},
				competitions: [],
				rounds: {},
				leaderboards: {},
				users: [],
				pageUserId: document.querySelector('#alpine-state').getAttribute('data-page-user-id'),
				fakeEventId: document.querySelector('#alpine-state').getAttribute('data-fake-event-id'),
				apexUrl: document.querySelector('#alpine-state').getAttribute('data-apex-url'),
			}
		}
	</script>
}
