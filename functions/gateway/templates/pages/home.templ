package pages

import (
	"github.com/google/uuid"
	"github.com/meetnearme/api/functions/gateway/helpers"
	"github.com/meetnearme/api/functions/gateway/services"
	"log"
)

templ EventsInner(events []services.Event) {
	if (len(events) < 1) {
		<p class="text-md md:text-lg text-center mt-5">
			No events found, try enabling geolocation or changing your filters like location, date, and time
		</p>
	} else {
		for _, ev := range events {
			<div class="flex w-full relative">
				<a class="flex w-full" href={ templ.URL("/events/" + ev.Id) }>
					<img
						src={ templ.EscapeString(helpers.GetImgUrlFromHash(ev.Id)) }
						alt=""
						class="object-cover w-full aspect-[4/3] md:aspect-[16/9] opacity-30 hover:opacity-75 transition-all"
					/>
				</a>
				<div class="flex flex-col justify-between w-full p-4 md:p-12 bg-gradient-to-t from-black/70 from-80% to-transparent absolute bottom-0 left-0">
					<div class="mb-2">
						<h2 class="text-2xl md:text-3xl">{ ev.Name }</h2>
						<p class="text-sm md:text-base">{ GetDateOrShowNone(ev.StartTime) } | { GetTimeOrShowNone(ev.StartTime) } &commat; { ev.Address }</p>
					</div>
					<br/>
					<a href={ templ.URL("/events/" + ev.Id) } class="btn btn-primary btn-block">
						LEARN MORE
						&rarr;
					</a>
				</div>
			</div>
		}
	}
}

func GetCityCountryFromLocation(cfLocation helpers.CdnLocation, latStr string, lonStr string) string {
	var emptyCfLocation = helpers.CdnLocation{}
	if cfLocation == emptyCfLocation && latStr != "" && lonStr != "" {
		return "Geocoordinates: " + latStr + ", " + lonStr
	}
	if cfLocation.City != "" && cfLocation.CCA2 != "" {
		return cfLocation.City + ", " + cfLocation.CCA2
	}
	return "Location: Please Select"
}

func GetDateOrShowNone(date int64) string {
	formattedDate, err := helpers.FormatDate(date)
	if date == 0 || err != nil {
		return ""
	}
	return formattedDate
}

func GetTimeOrShowNone(time int64) string {
	formattedTime, err := helpers.FormatTime(time)
	if time == 0 || err != nil {
		return ""
	}
	return formattedTime
}

func GetCitiesAsJsonStr() string {
	cityData := make([]map[string]interface{}, 0, 200)
	for _, city := range helpers.Cities[:50] {
		cityData = append(cityData, map[string]interface{}{
			"id":        uuid.New(),
			"name":      city.City,
			"state":     city.State,
			"latitude":  city.Latitude,
			"longitude": city.Longitude,
			"label":     city.City + ", " + city.State + ", US",
		})
	}

	cityStateJsonString, err := templ.JSONString(cityData)
	if err != nil {
		// Handle the error appropriately
		log.Printf("Error creating JSON string: %v", err)
		cityStateJsonString = "[]" // Fallback to empty array
	}

	return cityStateJsonString
}

templ HomePage(events []services.Event, cfLocation helpers.CdnLocation, latStr string, lonStr string) {
	<div class="header-hero">
		<h1 class="text-xl md:text-4xl text-center mb-5">
			Push Your Boundaries.
			<br/>
			Explore Your World.
		</h1>
	</div>
	<div class="min-h-screen">
		<header class="flex justify-between p-4 bg-black border-b border-gray-700">
			<nav class="flex space-x-4">
				<button href="#" class="text-sm md:text-xl font-bold border-b-2 border-white">
					EVENTS
				</button>
				<button href="#" class="text-sm md:text-xl">
					GROUPS
				</button>
				<button href="#" class="text-sm md:text-xl">
					ORGANIZERS
				</button>
			</nav>
			//
			<button onclick="document.getElementById('flyout-tab-filters').click(); document.getElementById('main-drawer').click();" style="display: inline-block;" class="btn btn-ghost">
				FILTER <svg class="svg-icon" style="width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden; display: inline-block;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"><path d="M640 288a64 64 0 1 1 0.032-128.032A64 64 0 0 1 640 288z m123.456-96c-14.304-55.04-64-96-123.456-96s-109.152 40.96-123.456 96H128v64h388.544c14.304 55.04 64 96 123.456 96s109.152-40.96 123.456-96H896V192h-132.544zM640 864a64 64 0 1 1 0.032-128.032A64 64 0 0 1 640 864m0-192c-59.456 0-109.152 40.96-123.456 96H128v64h388.544c14.304 55.04 64 96 123.456 96s109.152-40.96 123.456-96H896v-64h-132.544c-14.304-55.04-64-96-123.456-96M384 576a64 64 0 1 1 0.032-128.032A64 64 0 0 1 384 576m0-192c-59.456 0-109.152 40.96-123.456 96H128v64h132.544c14.304 55.04 64 96 123.456 96s109.152-40.96 123.456-96H896v-64H507.456c-14.304-55.04-64-96-123.456-96" fill="#FFFFFF"></path></svg>
			</button>
		</header>
		// Source: https://www.penguinui.com/components/combobox
		<div x-data="getLocationSearchData()" class="flex w-full max-w-xs flex-col gap-1" x-on:keydown="handleKeydownOnOptions($event)" x-on:keydown.esc.window="isOpen = false, openedWithKeyboard = false" x-init="options = allOptions">
			<div class="relative px-4">
				<!-- trigger button  -->
				<button
					type="button"
					class="inline-flex w-full items-center justify-between gap-2 border border-slate-300 rounded-md bg-slate-100 mt-2 px-4 py-2 text-sm font-medium tracking-wide text-slate-700 transition hover:opacity-75 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-700 dark:border-slate-700 dark:bg-slate-800/50 dark:text-slate-300 dark:focus-visible:outline-blue-600"
					role="combobox"
					aria-controls="makesList"
					aria-haspopup="listbox"
					x-on:click="isOpen = ! isOpen"
					x-on:keydown.down.prevent="openedWithKeyboard = true"
					x-on:keydown.enter.prevent="openedWithKeyboard = true"
					x-on:keydown.space.prevent="openedWithKeyboard = true"
					x-bind:aria-expanded="isOpen || openedWithKeyboard"
					x-bind:aria-label="selectedOption.label ? '' : ''"
				>
					<span
						class="text-sm font-normal"
						x-text="selectedOption?.label ? selectedOption.label : 'Location: Please Select'"
					></span>
					<span
						class="sr-only"
						x-text="selectedOption?.label ? selectedOption.label : 'Location: Please Select'"
					></span>
					<!-- Chevron  -->
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5" aria-hidden="true">
						<path fill-rule="evenodd" d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd"></path>
					</svg>
				</button>
				<!-- Hidden Input To Grab The Selected Value  -->
				<input id="make" name="make" x-ref="hiddenTextField" hidden=""/>
				<div
					x-show="isOpen || openedWithKeyboard"
					:class="{'opacity-100': isOpen || openedWithKeyboard}"
					class="w-full opacity-0 transition-all absolute left-4 top-12 z-10 overflow-hidden rounded-md border border-slate-300 bg-slate-100"
					id="makesList"
					role="listbox"
					aria-label="locations list"
					x-on:click.outside="isOpen = false, openedWithKeyboard = false"
					x-on:keydown.down.prevent="$focus.wrap().next()"
					x-on:keydown.up.prevent="$focus.wrap().previous()"
					x-transition
					x-trap="openedWithKeyboard"
				>
					<!-- Search  -->
					<div class="relative">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 24 24"
							stroke="currentColor"
							fill="none"
							stroke-width="1.5"
							class="absolute left-4 top-1/2 size-5 -translate-y-1/2 text-slate-700/50 dark:text-slate-300/50"
							aria-hidden="true"
						>
							<path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"></path>
						</svg>
						// this was removed
						// x-on:input="getFilteredOptions($el.value)"
						<input
							type="text"
							class="w-full border-b borderslate-300 bg-slate-100 py-2.5 pl-11 pr-4 text-sm text-slate-700 focus:outline-none focus-visible:border-blue-700 disabled:cursor-not-allowed disabled:opacity-75 dark:border-slate-700 dark:bg-slate-800 dark:text-slate-300 dark:focus-visible:border-blue-600"
							name="loc_search"
							aria-label="Search"
							@input.throttle="fetchLocations($event.target.value)"
							x-ref="loc_search"
							placeholder="Search"
						/>
					</div>
					<!-- Options  -->
					<ul class="flex max-h-44 flex-col overflow-y-auto">
						<li class="hidden px-4 py-2 text-sm text-slate-700 dark:text-slate-300" x-ref="noResultsMessage">
							<span>No matches found</span>
						</li>
						<template x-for="(item, index) in options" :key="index">
							<li
								class="combobox-option inline-flex cursor-pointer justify-between gap-6 bg-slate-100 px-4 py-2 text-sm text-slate-700 hover:bg-slate-800/5 hover:text-black focus-visible:bg-slate-800/5 focus-visible:text-black focus-visible:outline-none dark:bg-slate-800 dark:text-slate-300 dark:hover:bg-slate-100/5 dark:hover:text-white dark:focus-visible:bg-slate-100/10 dark:focus-visible:text-white"
								role="option"
								@click="setSelectedOption(item)"
								@keydown.enter="setSelectedOption(item)"
								:id="'option-' + index"
								tabindex="0"
							>
								<!-- Label  -->
								<span :class="selectedOption && selectedOption.value == item.value ? 'font-bold' : null" x-text="item.label"></span>
								<!-- Screen reader 'selected' indicator  -->
								<span class="sr-only" x-text="selectedOption && selectedOption.value == item.value ? 'selected' : null"></span>
								<!-- Checkmark  -->
								<svg x-cloak x-show="selectedOption && selectedOption.value == item.value" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke="currentColor" fill="none" stroke-width="2" class="size-4" aria-hidden="true">
									<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"></path>
								</svg>
							</li>
						</template>
					</ul>
				</div>
			</div>
		</div>
		<div x-data="getHomeState()" class="p-4" @location-selected.window="handleLocationSelected">
			<form
				id="event-search-form"
				class="flex"
				novalidate
				hx-get="/api/html/events"
				hx-indicator="#events-container"
				hx-ext="json-enc"
				hx-target="#events-container-inner"
				hx-disabled-elt="button[type='submit']"
				@submit.prevent=""
				hx-vals="js:{...getFormValues()}"
			>
				<input
					x-model="start_time"
					name="start_time"
					id="start_time"
					type="hidden"
				/>
				<input
					x-model="end_time"
					name="end_time"
					id="end_time"
					type="hidden"
				/>
				<input
					x-model="q"
					name="q"
					id="q"
					type="hidden"
				/>
				<input
					x-model="radius"
					name="radius"
					id="radius"
					type="hidden"
				/>
				<input
					x-model="lat"
					name="lat"
					id="lat"
					type="hidden"
				/>
				<input
					x-model="lon"
					name="lon"
					id="lon"
					type="hidden"
				/>
				<div class="flex flex-auto space-x-2">
					<button
						type="submit"
						:class="{
							'btn-primary': start_time === 'this_month',
							'hover:text-black hover:bg-gray-500 text-black bg-gray-200': start_time !== 'this_month'
						}"
						class="btn grow px-4 py-2 text-md md:text-xl "
						@click="pushToQueryParams('start_time', 'this_month')"
					>
						THIS MONTH
					</button>
					<button
						type="submit"
						:class="{
							'btn-primary': start_time === 'today',
							'hover:text-black hover:bg-gray-500 text-black bg-gray-200': start_time !== 'today'
						}"
						class="btn grow px-4 py-2 text-md md:text-xl "
						@click="pushToQueryParams('start_time', 'today')"
					>
						TODAY
					</button>
					<button
						type="submit"
						:class="{
							'btn-primary': start_time === 'tomorrow',
							'hover:text-black hover:bg-gray-500 text-black bg-gray-200': start_time !== 'tomorrow'
						}"
						class="btn grow px-4 py-2 text-md md:text-xl "
						@click="pushToQueryParams('start_time', 'tomorrow')"
					>
						TOMORROW
					</button>
					<button
						type="submit"
						:class="{
							'btn-primary': start_time === 'this_week',
							'hover:text-black hover:bg-gray-500 text-black bg-gray-200': start_time !== 'this_week'
						}"
						class="btn grow px-4 py-2 text-md md:text-xl "
						@click="pushToQueryParams('start_time', 'this_week')"
					>
						THIS WEEK
					</button>
				</div>
			</form>
		</div>
		<main id="events-container">
			<div class="htmx-indicator flex flex-wrap items-center justify-center my-4">
				<span class="loading loading-spinner loading-lg text-primary"></span>
			</div>
			<div id="events-container-inner">
				@EventsInner(events)
			</div>
		</main>
	</div>
	<script id="alpine-state" data-cities-default-list={ GetCitiesAsJsonStr() } data-city-label-initial={ GetCityCountryFromLocation(cfLocation, latStr, lonStr) }>
    function getFormValues() {
			return {
				start_time: document.getElementById('start_time').value,
				end_time: document.getElementById('end_time').value,
				q: document.getElementById('q').value,
				radius: document.getElementById('radius').value,
				lat: document.getElementById('lat').value,
				lon: document.getElementById('lon').value
			};
    }

		function getLocationSearchData() {
			return {
				allOptions: JSON.parse(
						document.querySelector('#alpine-state').getAttribute('data-cities-default-list')
				).map((city) => ({
						label: city.label,
						value: city.id,
						latitude: city.latitude,
						longitude: city.longitude,
				})),
				options: [],
				isOpen: false,
				openedWithKeyboard: false,
				selectedOption: {
					label: document.querySelector('#alpine-state').getAttribute('data-city-label-initial')
				},
        async fetchLocations(query) {
						if (query.length >= 3) {
            	this.options = await fetch(`/api/locations?q=${query}`).then(res => {
								return res.json()
							}).then(json => {
								return json.map((city) => ({
										label: city.label,
										value: city.id,
										latitude: city.latitude,
										longitude: city.longitude,
								}))
							});
						}
        },
				setSelectedOption(option) {
						this.selectedOption = option
						this.isOpen = false
						this.openedWithKeyboard = false
						this.$refs.hiddenTextField.value = option.value
						// Update lat and lon in the parent component
						this.$dispatch('location-selected', { lat: option.latitude, lon: option.longitude })
				},
				getFilteredOptions(query) {
						this.options = this.allOptions.filter((option) =>
								option.label.toLowerCase().includes(query.toLowerCase()),
						)
						if (this.options.length === 0) {
								this.$refs.noResultsMessage.classList.remove('hidden')
						} else {
								this.$refs.noResultsMessage.classList.add('hidden')
						}
				},
				handleKeydownOnOptions(event) {
						// if the user presses backspace or the alpha-numeric keys, focus on the search field
						if ((event.keyCode >= 65 && event.keyCode <= 90) || (event.keyCode >= 48 && event.keyCode <= 57) || event.keyCode === 8) {
								this.$refs.loc_search.focus()
						}
				},
			}
		}

		function getHomeState() {
				const url = new URL(window.location.href);
				const params = new URLSearchParams(url.search);

				return {
						init() {
								this.$watch('lat', value => this.pushToQueryParams('lat', value))
								this.$watch('lon', value => this.pushToQueryParams('lon', value))
						},
						start_time: params.get('start_time') ?? 'this_month',
						end_time: params.get('end_time') ?? null,
						q: params.get('q') ?? null,
						radius: params.get('radius') ?? null,
						lat: params.get('lat') ?? null,
						lon: params.get('lon') ?? null,
						allParams: [
							'start_time',
							'end_time',
							'q',
							'radius',
							'lat',
							'lon',
						],
						handleLocationSelected(event) {
								this.lat = event.detail.lat
								this.lon = event.detail.lon

								// Submit the form
								const form = document.getElementById('event-search-form')
								if (form instanceof HTMLFormElement) {
										form.requestSubmit()
								}
						},
						pushToQueryParams(param, selected) {
								// Get current URL and parse its query parameters
								const url = new URL(window.location.href);
								const params = new URLSearchParams(url.search);

								this.allParams.forEach(key => {
									if ( key !== param && this[key] !== null && this[key] !== null ) {
										params.set(key, this[key])
									}
								})

								this[param] = selected;
								params.set(param, selected);

								window.history.pushState({}, '', `${url.pathname}?${params.toString()}`);
						},
						updateHasEvents(event) {
							if (event.detail.successful && document.querySelector('#event-candidates-inner').querySelectorAll('input[type="checkbox"]').length > 0 ){
								this.hasEvents = true;
							} else {
								this.hasEvents = false;
							}
							console.log('this.hasEvents', this.hasEvents)
						},
			}
		}
	</script>
}
