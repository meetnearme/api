package pages

import (
	"fmt"
	"github.com/meetnearme/api/functions/gateway/helpers"
	"github.com/meetnearme/api/functions/gateway/types"
	"net/url"
	"os"
	"strings"
)

templ IconLeftSection(labelText, labelValue, icon string, urlString string, sectionType string, event types.Event) {
	<div class="flex">
		<div class="flex-none">
			// Left column content (fit to width)
			<div class="icon-container w-6 mr-2">
				<img class="fill-current" alt={ icon + "icon " } src={ templ.EscapeString(os.Getenv("STATIC_BASE_URL") + "/assets/" + icon + ".svg") }/>
			</div>
		</div>
		<div class="flex-grow">
			<p>
				if sectionType == "OWNER_NAME" {
					<strong>{ labelText }:</strong>
					// TODO: rewrite this after migrating to `event.EventOwners` array (required marqo db migration)
					{{ eventOwnersArr := strings.Split(event.EventOwnerName, helpers.EventOwnerNameDelimiter) }}
					for idx, owner := range event.EventOwners {
						if idx > 0 {
							,&nbsp;
						}
						<a class="link link-primary" href={ templ.URL(os.Getenv("APEX_URL") + "/user/" + owner) }>{ eventOwnersArr[idx] }</a>
						// <a class="link link-primary" href={ templ.URL("https://" + owner + "." + os.Getenv("APEX_URL")) }>{ eventOwnersArr[idx] }</a>
					}
				} else if urlString != "" {
					<strong>{ labelText }:</strong> <a class="link link-primary" href={ templ.URL(urlString) }>{ labelValue }</a>
				} else {
					<strong>{ labelText }:</strong> { labelValue }
				}
				// This is a hack because it wasn't clear how to get nested templ components working
				if sectionType == "venue" {
					<p>
						<a class="link link-primary" href={ templ.URL(fmt.Sprintf("https://www.google.com/maps/search/?api=1&query=%f,%f", event.Lat, event.Long)) }>
							{ "(Map Link)" }
						</a>
					</p>
				}
			</p>
		</div>
	</div>
}

templ EventDetailsPage(event types.Event, userInfo helpers.UserInfo, canEdit bool) {
	<div class="max-w-prose mx-auto" x-data="getEventDetailsState()">
		if event.Id == "" {
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			<h2 class="text-3xl mt-2 text-center">404 - Can't Find That Event</h2>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
		} else {
			if (canEdit) {
				<div class="alert alert-success">
					You are an editor for this event.
					if event.EventSourceType == helpers.ES_EVENT_SERIES {
						<a
							class="btn btn-sm"
							href={ templ.URL(strings.Replace(strings.Replace(helpers.SitePages["edit-event"].Slug, "{"+helpers.EVENT_ID_KEY+"}", event.EventSourceId, 1), "{trailingslash:\\/?}", "", 1)) }
						>Edit Series</a>
					} else {
						<a
							class="btn btn-sm"
							href={ templ.URL(strings.Replace(strings.Replace(helpers.SitePages["edit-event"].Slug, "{"+helpers.EVENT_ID_KEY+"}", event.Id, 1), "{trailingslash:\\/?}", "", 1)) }
						>Edit Event</a>
					}
				</div>
			}
			<h2 class="text-3xl mt-2">{ event.Name }</h2>
			if event.EventSourceType == helpers.ES_SERIES_PARENT {
				<h3 class="text-xl mt-2">Event Series</h3>
				<div
					hx-get={ "/api/html/events?list_mode=" + helpers.EV_MODE_CAROUSEL + "&radius=500000&end_time=2099-10-18T10:00:00Z&event_source_ids=" + event.Id }
					hx-trigger="load"
					hx-swap="outerHTML"
				>
					<div class="mt-2"><span class="loading loading-spinner loading-md text-primary"></span></div>
				</div>
			}
			<br/>
			<p>
				@IconLeftSection("Host", event.EventOwnerName, "community", `/?owners=`+event.EventOwners[0], "OWNER_NAME", event)
				<br/>
				@IconLeftSection("Venue", event.Address, "location", "/?address="+event.Address, "VENUE", event)
				<br/>
				if event.EventSourceType != "SLF_EVS" {
					if helpers.GetDateOrShowNone(event.StartTime, event.Timezone) != "" {
						@IconLeftSection("Date", helpers.GetDateOrShowNone(event.StartTime, event.Timezone), "calendar", "", "", event)
					}
					<br/>
					if helpers.GetTimeOrShowNone(event.StartTime, event.Timezone) != "" {
						@IconLeftSection("Time", helpers.GetTimeOrShowNone(event.StartTime, event.Timezone), "clock", "", "", event)
					}
					<br/>
				}
				if event.StartingPrice > 0 {
					// TODO: handle basecurrency
					@IconLeftSection("Price", "$"+fmt.Sprint(event.StartingPrice/100), "price", "", "", event)
				}
				if event.EventSourceType == helpers.ES_EVENT_SERIES && event.EventSourceId != "" {
					<div class="divider my-3"></div>
					<h3 class="text-xl mt-2 mb-2">All Events in this Series</h3>
					<div
						hx-get={ "/api/html/events?list_mode=" + helpers.EV_MODE_CAROUSEL + "&radius=500000&end_time=2099-10-18T10:00:00Z&event_source_ids=" + event.EventSourceId }
						hx-trigger="load"
						hx-swap="outerHTML"
					>
						<div class="mt-2"><span class="loading loading-spinner loading-md text-primary"></span></div>
					</div>
				}
				<br/>
				<h3 class="text-xl">EVENT DESCRIPTION</h3>
				<br/>
				<div class="whitespace-pre-wrap">{ event.Description }</div>
				<pre x-text="JSON.stringify(formData.rounds)"></pre>
				<template x-for="round in formData.rounds">
					<div>
						<p x-text="round.Name"></p>
						<p x-text="round.Description"></p>
						<button @click="submitVote(round.competitorA)">Vote for <span x-text="round.competitorA"></span></button>
						<button @click="submitVote(round.competitorB)">Vote for <span x-text="round.competitorB"></span></button>
					</div>
				</template>
			</p>
			<div class="bottom-drawer">
				<div class="container mx-auto">
					if event.StartingPrice > 0 {
						<button data-umami-event={ "buy-tkts-clk" } data-umami-event-event-id={ event.Id } @click="handleCtaClick('cart')" class="btn btn-block btn-primary">BUY TICKETS</button>
					} else if event.HasRegistrationFields && event.StartingPrice == 0 {
						<button data-umami-event={ "reg-tkts-clk" } data-umami-event-event-id={ event.Id } @click="handleCtaClick('cart')" class="btn btn-block btn-primary">REGISTER NOW</button>
					} else {
						<a
							data-umami-event={ "rsvp-click" }
							data-umami-event-event-id={ event.Id }
							target="_blank"
							href={ templ.URL(fmt.Sprintf("https://calendar.google.com/calendar/render?action=TEMPLATE&dates=%s/%s&ctz=%s&details=%s&location=%s&text=%s",
						helpers.FormatTimeForGoogleCalendar(event.StartTime, event.Timezone),
						helpers.FormatTimeForGoogleCalendar(event.StartTime + (60*60), event.Timezone),
						event.Timezone.String(),
						url.QueryEscape(event.Description),
						url.QueryEscape(event.Address),
						url.QueryEscape(event.Name))) }
							@click="handleCtaClick('rsvp')"
							class="btn btn-block btn-primary"
						>
							if userInfo.Sub == "" {
								ADD TO CALENDAR
							} else {
								RSVP
							}
						</a>
					}
					if userInfo.Sub != "" {
						<br/>
						<br/>
						<button
							data-umami-event={ "intrst-click" }
							data-umami-event-event-id={ event.Id }
							@click="document.getElementById('icmi-modal').showModal(); handleCtaClick('icmi')"
							class="btn btn-block btn-primary btn-outline btn-bold-outline text-neutral-content"
						>Interested, can't make it!</button>
						<dialog id="icmi-modal" class="modal modal-bottom sm:modal-middle bg-base-200 bg-opacity-90">
							<div class="modal-box">
								<h3 class="text-lg font-bold">YAY!</h3>
								<p class="py-4">We've noted your interest, sorry to miss you... but next time!</p>
								<form method="dialog" class="modal-backdrop">
									<!-- if there is a button in form, it will close the modal -->
									<button class="btn btn-primary">Close</button>
								</form>
							</div>
						</dialog>
					}
				</div>
			</div>
		}
	</div>
	<img class="main-bg top" alt="event featured image" src={ templ.EscapeString(helpers.GetImgUrlFromHash(event)) }/>
	<script id="event-details-script" data-interested-status={ helpers.PurchaseStatus.Interested } data-registered-status={ helpers.PurchaseStatus.Registered } data-user-id={ userInfo.Sub } data-event-id={ event.Id } data-event-source-id={ event.EventSourceId } data-event-type={ event.EventSourceType } data-event-type-single={ helpers.ES_SINGLE_EVENT } data-event-type-series-parent={ helpers.ES_SERIES_PARENT } data-event-type-series-child={ helpers.ES_EVENT_SERIES } data-competition-config-id={ event.CompetitionConfigId }>
		function getEventDetailsState() {
			console.log('getEventDetailsState')
			return {
				userId: document.querySelector('#registration-purchasables')?.getAttribute?.('data-user-id'),
				eventId: document.querySelector('#registration-purchasables')?.getAttribute?.('data-event-id'),
				eventName: document.querySelector('#registration-purchasables').getAttribute('data-event-name'),
				interestedStatus: document.querySelector('#event-details-script')?.getAttribute?.('data-interested-status'),
				registeredStatus: document.querySelector('#event-details-script')?.getAttribute?.('data-registered-status'),
				competitionConfigId: document.querySelector('#event-details-script')?.getAttribute?.('data-competition-config-id'),
				init() {
					(async () => {
						try {
              const competitionConfigId = document.querySelector('#event-details-script')?.getAttribute?.('data-competition-config-id')
              console.log('competitionConfigId', competitionConfigId)
							console.log('199 init')
							if (this.userId !== '' && competitionConfigId !== '') {
								console.log('201 init')
								const response = await fetch(`/api/purchases/has-for-event`, {
									method: 'POST',
									body: JSON.stringify({
										childEventId: this.eventId,
										parentEventId: this.eventSourceId,
										userId: this.userId,
									}),
								});
								console.log('208 response', response)
								const data = await response.json();
								console.log('208 data', data)
								if (data.hasPurchase) {
									const roundsResponse = await fetch(`/api/competition-round/competition/${competitionConfigId}`, {
										method: 'GET',
									});
									const roundsData = await roundsResponse.json();
									console.log('214 roundsData', roundsData)
									this.formData.rounds = roundsData
                  if (this.formData.rounds.length > 0) {
                    const ids = this.formData.rounds.flatMap(round => [round.competitorA, round.competitorB]).join(',')

                    const usersRes = await fetch(`/api/users?ids=${ids}`, {
                      method: 'GET',
                    });
                    const usersData = await usersRes.json();
                    console.log('214 usersData', usersData)
                    this.formData.rounds = this.formData.rounds.map(round => {
                      // round.user = usersData.find(user => user.id === round.userId)
                      return {
                        competitorADisplayName: usersData.find(user => user.id === round.userId).displayName,
                        competitorBDisplayName: usersData.find(user => user.id === round.userId).displayName,
                        ...round
                      }
                    })
                  }
								}
							}
						} catch (e ) {
							console.error(e);
						}
					})();
				},
				eventTypeSingleConstant: document.querySelector("#event-details-script").getAttribute('data-event-type-single'),
				eventTypeSeriesParentConstant: document.querySelector("#event-details-script").getAttribute('data-event-type-series-parent'),
				eventTypeSeriesChildConstant: document.querySelector("#event-details-script").getAttribute('data-event-type-series-child'),
				formData: {
          rounds: [],
        },
				handleCtaClick(tab) {
					if (tab === 'rsvp' || tab === 'icmi' && this.userId) {
						const body = {
							status: tab === 'rsvp' ? this.registeredStatus : this.interestedStatus,
							event_name: this.eventName,
							purchased_items: [],
							total: 0,
						}
						const headers = {
							type: 'application/json',
						};
						const blob = new Blob([JSON.stringify(body)], headers);
						navigator.sendBeacon(`/api/checkout/${this.eventId}`, blob);
						return
					}
					if (tab === 'cart') {
						// select the subnav item
						document.getElementById(`flyout-tab-${tab}`).click();
						// toggle the main drawer
						document.getElementById(`main-drawer`).click();
					}

				}
			}
		}
	</script>
}
