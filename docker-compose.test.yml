version: '3.8'

services:
  weaviate-test:
    image: cr.weaviate.io/semitechnologies/weaviate:1.30.1
    containter_name: meetnearme-weaviate-test
    restart: unless-stopped
    volumes:
      - weaviate_test_data:/var/lib/weaviate
    environment:
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      ENABLE_MODULES: 'text2vec-transformers'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-transformers'
      TRANSFORMERS_INFERENCE_API: 'http://t2v-transformers-test:8080'
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true' # Easiest for isolated testing
      CLUSTER_HOSTNAME: 'node1'
      LOG_LEVEL: 'warning'

  t2v-transformers-test:
    image: cr.weaviate.io/semitechnologies/text2vec-transformers:msmarco-distilbert-base-v4
    container_name: meetnearme-t2v-transformers-test
    environment:
      ENABLE_CUDA: '0' # Run on CPU for CI/local dev

  # 3. Go Application Test Runner Service
  go-app-tester:
    build:
      context: .
      dockerfile: go-app.Dockerfile # Use the same Dockerfile as your dev app
    container_name: meetnearme-go-app-tester
    # This command overrides the default server start command from your Dockerfile
    # It runs your entire test suite.
    command: ["go", "test", "-v", "-race", "-cover", "./..."]
    environment:
      # Point your Go app to the test database containers by their service names
      WEAVIATE_HOST: "weaviate-test"
      WEAVIATE_PORT: "8080"
      WEAVIATE_SCHEME: "http"
      # Add any other environment variables your application needs to run tests
      # e.g., POSTGRES_HOST, ZITADEL_CLIENT_ID etc.
    depends_on:
      weaviate-test:
        # It's better to wait for health/readiness if you can define a healthcheck
        condition: service_started
      t2v-transformers-test:
        condition: service_started

volumes:
  weaviate_test_data:
