# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go build, eslint, test and coverage

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build-go:
    strategy:
      matrix:
        # NOTE: add firefox, webkit ?
        browser: [chromium]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'
      - name: Generate templ code
        uses: './.github/actions/templ_generate'
        with:
          templ-version: 'v0.2.793'
          setup-go: 'false'
          commit: 'false'
      - name: Install dependencies
        run: |
          go get ./...
      - name: Generate Cloudflare locations Go file
        uses: './.github/actions/generate_cloudflare_locations_file'
      - name: Build Go binaries
        run: go build -v ./...
      - name: Cache Playwright drivers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright-go
            ~/.cache/ms-playwright
            ~/Library/Caches/ms-playwright-go
            ~/Library/Caches/ms-playwright
            ~\AppData\Local\ms-playwright-go
            ~\AppData\Local\ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            playwright-${{ runner.os }}-
      - name: Install Playwright-go
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          go install github.com/playwright-community/playwright-go/cmd/playwright@latest
          playwright install --with-deps ${{ matrix.browser }}
      - name: Run Go tests
        run: go test ./...
      - name: Run tests and generate coverage
        run: |
          go test -v -coverprofile=coverage.out ./functions/...
          go tool cover -func=coverage.out | tee coverage.txt
          cat coverage.txt # Echo coverage for debugging
      - name: Check coverage
        run: |
          COVERAGE=$(awk -F'[[:space:]]+' '/^total:/ {print $NF+0}' coverage.txt)
          echo "Total coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 39" | bc -l) )); then
            echo "ðŸ”´ Coverage is $COVERAGE%. We require minimum 45%."
            exit 1
          elif (( $(echo "$COVERAGE < 60" | bc -l) )); then
            echo "ðŸŸ  CoverageGi is $COVERAGE%. It's passing but is close to the failure cutoff."
          else
            echo "ðŸŸ¢ Coverage is $COVERAGE%. We're good!"
          fi

  lint-templ-js:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'
          cache: 'npm'
      - name: Install dependencies and lint javascript in templ files
        run: |
          npm ci
          npm run lint:templ:prod
