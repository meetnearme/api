# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go build, test and coverage

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'

      - name: Install dependencies
        run: |
          go get ./...
          # go get example.com/octo-examplemodule
          # go get example.com/octo-examplemodule@v1.3.4

      - name: Build Go binaries
        run: go build -v ./...

      - name: Run Go tests
        run: go test ./...

      - name: Run tests and generate coverage
        run: |
          go test -v -coverprofile=coverage.out ./functions/...
          go tool cover -func=coverage.out | tee coverage.txt
          cat coverage.txt # Echo coverage for debugging

      - name: Check coverage
        run: |
          COVERAGE=$(awk -F'[[:space:]]+' '/^total:/ {print $NF+0}' coverage.txt)
          echo "Total coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 50" | bc -l) )); then
            echo "ðŸ”´ Coverage is $COVERAGE%. We require minimum 50%."  
            exit 1
          elif (( $(echo "$COVERAGE < 60" | bc -l) )); then
            echo "ðŸŸ  Coverage is $COVERAGE%. It's passing but is close to the failure cutoff."
          else
            echo "ðŸŸ¢ Coverage is $COVERAGE%. We're good!"  
          fi
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with: 
          name: coverage-report
          path: coverage.txt

      
